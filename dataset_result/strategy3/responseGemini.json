[{"data":{"cwe_ids":["CWE-190"],"filename":"000082110_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    fscanf (stdin, \"%c\", &data);\n    {\n        char result = data + 1;\n        printHexCharLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,787]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082149_1.txt"},"language":"lang-cpp","code":"\n\ntypedef struct var1\n{\n    char structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    char data = myStruct.structFirst;\n    {\n        char result = data + 1;\n        printHexCharLine(result);\n    }\n}\n\n\n\ntypedef struct var1\n{\n    char structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid qazmlps()\n{\n    char data;\n    var2 myStruct;\n    data = ' ';\n    fscanf (stdin, \"%c\", &data);\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,676]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082188_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid qazmlps(char data);\n\nvoid ppoeidn(char data)\n{\n    qazmlps(data);\n}\n\n\n\n\n\nvoid qazmlps(char data)\n{\n    if(data > 0) \n    {\n        char result = data * 2;\n        printHexCharLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(char data);\n\nvoid func7()\n{\n    char data;\n    data = ' ';\n    fscanf (stdin, \"%c\", &data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082227_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    char *dataPtr1 = &data;\n    char *dataPtr2 = &data;\n    data = ' ';\n    {\n        char data = *dataPtr1;\n        fscanf (stdin, \"%c\", &data);\n        *dataPtr1 = data;\n    }\n    {\n        char data = *dataPtr2;\n        {\n            char result = data * data;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,787]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082266_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = CHAR_MAX;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            char result = data + 1;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082305_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    if(STATIC_CONST_TRUE)\n    {\n        data = CHAR_MAX;\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        if(data > 0) \n        {\n            char result = data * 2;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082344_1.txt"},"language":"lang-cpp","code":"#include <list>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<char> dataList)\n{\n    char data = dataList.back();\n    if(data > 0) \n    {\n        char result = data * 2;\n        printHexCharLine(result);\n    }\n}\n\n} #include <list>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<char> dataList);\n\nvoid qazmlps()\n{\n    char data;\n    list<char> dataList;\n    data = ' ';\n    data = CHAR_MAX;\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082383_1.txt"},"language":"lang-cpp","code":"\n\n#include <math.h>\n\n\n\nchar ppoeidn(char data)\n{\n    data = CHAR_MAX;\n    return data;\n}\n\n\n\n#include <math.h>\n\n\n\nchar ppoeidn(char data);\n\nvoid qazmlps()\n{\n    char data;\n    data = ' ';\n    data = ppoeidn(data);\n    {\n        char result = data * data;\n        printHexCharLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082422_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic void ppoeidn(char data)\n{\n    {\n        char result = data + 1;\n        printHexCharLine(result);\n    }\n}\n\nvoid qhwystdd()\n{\n    char data;\n    data = ' ';\n    data = (char)RAND32();\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082461_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    while(1)\n    {\n        data = (char)RAND32();\n        break;\n    }\n    while(1)\n    {\n        if(data > 0) \n        {\n            char result = data * 2;\n            printHexCharLine(result);\n        }\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082500_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    if(staticFive==5)\n    {\n        data = (char)RAND32();\n    }\n    if(staticFive==5)\n    {\n        {\n            char result = data * data;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082539_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(char data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(char data);\n};\n\n}\n\n\n\n#include <math.h>\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(char data)\n{\n    {\n        char result = data * data;\n        printHexCharLine(result);\n    }\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    char data;\n    data = ' ';\n    data = (char)RAND32();\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082690_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    if(staticTrue)\n    {\n        data = LLONG_MAX;\n    }\n    if(staticTrue)\n    {\n        {\n            int64_t result = data + 1;\n            printLongLongLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082729_1.txt"},"language":"lang-cpp","code":"#include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t> dataMap)\n{\n    int64_t data = dataMap[2];\n    {\n        int64_t result = data + 1;\n        printLongLongLine(result);\n    }\n}\n\n} #include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t> dataMap);\n\nvoid qazmlps()\n{\n    int64_t data;\n    map<int, int64_t> dataMap;\n    data = 0LL;\n    data = LLONG_MAX;\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082768_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t &data)\n{\n    data = LLONG_MAX;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t &data);\n\nvoid qazmlps()\n{\n    int64_t data;\n    data = 0LL;\n    ppoeidn(data);\n    if(data > 0) \n    {\n        int64_t result = data * 2;\n        printLongLongLine(result);\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082849_1.txt"},"language":"lang-cpp","code":"\n\n\n\nextern int var1;\n\nvoid ppoeidn(int64_t data)\n{\n    if(var1)\n    {\n        {\n            int64_t result = data + 1;\n            printLongLongLine(result);\n        }\n    }\n}\n\n\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(int64_t data);\n\nvoid uytvbdk()\n{\n    int64_t data;\n    data = 0LL;\n    data = (int64_t)RAND64();\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082888_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    if(globalReturnsTrue())\n    {\n        data = (int64_t)RAND64();\n    }\n    if(globalReturnsTrue())\n    {\n        if(data > 0) \n        {\n            int64_t result = data * 2;\n            printLongLongLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000082960_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t &data)\n{\n    data = (int64_t)RAND64();\n}\n\n} \n\n#include <math.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t &data);\n\nvoid qazmlps()\n{\n    int64_t data;\n    data = 0LL;\n    ppoeidn(data);\n    {\n        int64_t result = data * data;\n        printLongLongLine(result);\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[674]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083008_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int &data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = atoi(inputBuffer);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int &data);\n\nvoid qazmlps()\n{\n    int data;\n    data = 0;\n    ppoeidn(data);\n    {\n        int result = data + 1;\n        printIntLine(result);\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,832]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083047_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nstatic int ppoeidn(int data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = atoi(inputBuffer);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    return data;\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = 0;\n    data = ppoeidn(data);\n    if(data > 0) \n    {\n        int result = data * 2;\n        printIntLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[89,20,789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083128_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(globalReturnsTrue())\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = atoi(inputBuffer);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(globalReturnsTrue())\n    {\n        {\n            int result = data + 1;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083167_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(1)\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = atoi(inputBuffer);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(1)\n    {\n        if(data > 0) \n        {\n            int result = data * 2;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,787]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083206_1.txt"},"language":"lang-cpp","code":"\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nextern int var1;\nextern int var2;\nextern int var3;\n\n\n\nvoid ppoeidn()\n{\n    int data = var1;\n    if(data > 0) \n    {\n        int result = data * 2;\n        printIntLine(result);\n    }\n}\n\n\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nint var1;\nint var2;\nint var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    int data;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = atoi(inputBuffer);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083287_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic int ppoeidn(int data)\n{\n    fscanf(stdin, \"%d\", &data);\n    return data;\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        int result = data + 1;\n        printIntLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083326_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int data;\n    data = 0;\n    for(i = 0; i < 1; i++)\n    {\n        fscanf(stdin, \"%d\", &data);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        if(data > 0) \n        {\n            int result = data * 2;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083407_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(1)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = atoi(inputBuffer);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(1)\n    {\n        {\n            int result = data + 1;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083446_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nextern int var1;\nextern int var2;\nextern int var3;\n\n\n\nvoid ppoeidn()\n{\n    int data = var1;\n    {\n        int result = data + 1;\n        printIntLine(result);\n    }\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nint var1;\nint var2;\nint var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    int data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = atoi(inputBuffer);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,824,676]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083485_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid qazmlps(int data);\n\nvoid ppoeidn(int data)\n{\n    qazmlps(data);\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid func7(int data);\n\nvoid qazmlps(int data)\n{\n    func7(data);\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid func7(int data)\n{\n    if(data > 0) \n    {\n        int result = data * 2;\n        printIntLine(result);\n    }\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn(int data);\n\nvoid ppoeidn0()\n{\n    int data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = atoi(inputBuffer);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,807]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083566_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int data;\n    data = 0;\n    for(i = 0; i < 1; i++)\n    {\n        data = INT_MAX;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        {\n            int result = data + 1;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083605_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    int data;\n    data = 0;\n    if(staticReturnsTrue())\n    {\n        data = INT_MAX;\n    }\n    if(staticReturnsTrue())\n    {\n        if(data > 0) \n        {\n            int result = data * 2;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083644_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(int dataCopy);\n    ~GenClass1();\n\nprivate:\n    int data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(int dataCopy)\n{\n    data = dataCopy;\n    data = INT_MAX;\n}\n\nGenClass1::~GenClass1()\n{\n    if(data > 0) \n    {\n        int result = data * 2;\n        printIntLine(result);\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    int data;\n    data = 0;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083725_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid qazmlps(int data);\n\nvoid ppoeidn(int data)\n{\n    qazmlps(data);\n}\n\n\n\n\n\nvoid func7(int data);\n\nvoid qazmlps(int data)\n{\n    func7(data);\n}\n\n\n\n\n\nvoid func7(int data)\n{\n    {\n        int result = data + 1;\n        printIntLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(int data);\n\nvoid ppoeidn0()\n{\n    int data;\n    data = 0;\n    data = RAND32();\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083764_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    int &dataRef = data;\n    data = 0;\n    data = RAND32();\n    {\n        int data = dataRef;\n        if(data > 0) \n        {\n            int result = data * 2;\n            printIntLine(result);\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083845_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    short data;\n    data = 0;\n    if(staticReturnsTrue())\n    {\n        fscanf (stdin, \"%hd\", &data);\n    }\n    if(staticReturnsTrue())\n    {\n        {\n            short result = data + 1;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,676]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083884_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(short dataCopy);\n    ~GenClass1();\n\nprivate:\n    short data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(short dataCopy)\n{\n    data = dataCopy;\n    fscanf (stdin, \"%hd\", &data);\n}\n\nGenClass1::~GenClass1()\n{\n    {\n        short result = data + 1;\n        printIntLine(result);\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    short data;\n    data = 0;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083923_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(short data)\n{\n    if(data > 0) \n    {\n        short result = data * 2;\n        printIntLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(short data);\n\nvoid qazmlps()\n{\n    short data;\n    void (*funcPtr) (short) = ppoeidn;\n    data = 0;\n    fscanf (stdin, \"%hd\", &data);\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000083962_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n\nstatic short var1;\nstatic short var2;\nstatic short var3;\n\n\n\nstatic void ppoeidn()\n{\n    short data = var1;\n    {\n        short result = data * data;\n        printIntLine(result);\n    }\n}\n\nvoid qhwystdd()\n{\n    short data;\n    data = 0;\n    fscanf (stdin, \"%hd\", &data);\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084001_1.txt"},"language":"lang-cpp","code":"\n\n\n\nextern int var1;\n\nvoid ppoeidn(short data)\n{\n    if(var1)\n    {\n        {\n            short result = data + 1;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(short data);\n\nvoid uytvbdk()\n{\n    short data;\n    data = 0;\n    data = SHRT_MAX;\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084040_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    short data;\n    data = 0;\n    if(globalReturnsTrue())\n    {\n        data = SHRT_MAX;\n    }\n    if(globalReturnsTrue())\n    {\n        if(data > 0) \n        {\n            short result = data * 2;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084079_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n\n\n\nvoid ppoeidn()\n{\n    short data;\n    data = 0;\n    if(1)\n    {\n        data = SHRT_MAX;\n    }\n    if(1)\n    {\n        {\n            short result = data * data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084118_1.txt"},"language":"lang-cpp","code":"\n\n#include <math.h>\n\nextern short var1;\nextern short var2;\nextern short var3;\n\n\n\nvoid ppoeidn()\n{\n    short data = var1;\n    {\n        short result = data * data;\n        printIntLine(result);\n    }\n}\n\n\n\n#include <math.h>\n\nshort var1;\nshort var2;\nshort var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    short data;\n    data = 0;\n    data = SHRT_MAX;\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084157_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid qazmlps(short data);\n\nvoid ppoeidn(short data)\n{\n    qazmlps(data);\n}\n\n\n\n\n\nvoid func7(short data);\n\nvoid qazmlps(short data)\n{\n    func7(data);\n}\n\n\n\n\n\nvoid func7(short data)\n{\n    {\n        short result = data + 1;\n        printIntLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(short data);\n\nvoid ppoeidn0()\n{\n    short data;\n    data = 0;\n    data = (short)RAND32();\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084196_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    short data;\n    short &dataRef = data;\n    data = 0;\n    data = (short)RAND32();\n    {\n        short data = dataRef;\n        if(data > 0) \n        {\n            short result = data * 2;\n            printIntLine(result);\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084235_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n\n\n\nvoid ppoeidn()\n{\n    short data;\n    data = 0;\n    if(globalFive==5)\n    {\n        data = (short)RAND32();\n    }\n    if(globalFive==5)\n    {\n        {\n            short result = data * data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084274_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    unsigned int data;\n    data = 0;\n    if(staticTrue)\n    {\n        fscanf (stdin, \"%u\", &data);\n    }\n    if(staticTrue)\n    {\n        {\n            unsigned int result = data + 1;\n            printUnsignedLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,664]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084313_1.txt"},"language":"lang-cpp","code":"#include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, unsigned int> dataMap)\n{\n    unsigned int data = dataMap[2];\n    {\n        unsigned int result = data + 1;\n        printUnsignedLine(result);\n    }\n}\n\n} #include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, unsigned int> dataMap);\n\nvoid qazmlps()\n{\n    unsigned int data;\n    map<int, unsigned int> dataMap;\n    data = 0;\n    fscanf (stdin, \"%u\", &data);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084352_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(unsigned int &data)\n{\n    fscanf (stdin, \"%u\", &data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(unsigned int &data);\n\nvoid qazmlps()\n{\n    unsigned int data;\n    data = 0;\n    ppoeidn(data);\n    if(data > 0) \n    {\n        unsigned int result = data * 2;\n        printUnsignedLine(result);\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084433_1.txt"},"language":"lang-cpp","code":"\n\n\n\nextern int var1;\n\nvoid ppoeidn(unsigned int data)\n{\n    if(var1)\n    {\n        {\n            unsigned int result = data + 1;\n            printUnsignedLine(result);\n        }\n    }\n}\n\n\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(unsigned int data);\n\nvoid uytvbdk()\n{\n    unsigned int data;\n    data = 0;\n    data = UINT_MAX;\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084472_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    unsigned int data;\n    data = 0;\n    if(globalReturnsTrue())\n    {\n        data = UINT_MAX;\n    }\n    if(globalReturnsTrue())\n    {\n        if(data > 0) \n        {\n            unsigned int result = data * 2;\n            printUnsignedLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084544_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(unsigned int &data)\n{\n    data = UINT_MAX;\n}\n\n} \n\n#include <math.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(unsigned int &data);\n\nvoid qazmlps()\n{\n    unsigned int data;\n    data = 0;\n    ppoeidn(data);\n    {\n        unsigned int result = data * data;\n        printUnsignedLine(result);\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084592_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(unsigned int &data)\n{\n    data = (unsigned int)RAND32();\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(unsigned int &data);\n\nvoid qazmlps()\n{\n    unsigned int data;\n    data = 0;\n    ppoeidn(data);\n    {\n        unsigned int result = data + 1;\n        printUnsignedLine(result);\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[330]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000084631_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic unsigned int ppoeidn(unsigned int data)\n{\n    data = (unsigned int)RAND32();\n    return data;\n}\n\nvoid qhwystdd()\n{\n    unsigned int data;\n    data = 0;\n    data = ppoeidn(data);\n    if(data > 0) \n    {\n        unsigned int result = data * 2;\n        printUnsignedLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[469]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235351_1.txt"},"language":"lang-cpp","code":"#include <inttypes.h>\n#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    if(globalReturnsTrue())\n    {\n        fscanf (stdin, \"%\" SCNd64, &data);\n    }\n    if(globalReturnsTrue())\n    {\n        {\n            int64_t result = data + 1;\n            printLongLongLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,664]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235390_1.txt"},"language":"lang-cpp","code":"#include <inttypes.h>\n#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    goto source;\nsource:\n    fscanf (stdin, \"%\" SCNd64, &data);\n    goto var1;\nvar1:\n    if(data > 0) \n    {\n        int64_t result = data * 2;\n        printLongLongLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235429_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n#include <inttypes.h>\n\n\n\nstatic void ppoeidn(int64_t data)\n{\n    {\n        int64_t result = data * data;\n        printLongLongLine(result);\n    }\n}\n\nvoid qhwystdd()\n{\n    int64_t data;\n    data = 0LL;\n    fscanf (stdin, \"%\" SCNd64, &data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235468_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n#include <inttypes.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    while(1)\n    {\n        data = LLONG_MAX;\n        break;\n    }\n    while(1)\n    {\n        {\n            int64_t result = data * data;\n            printLongLongLine(result);\n        }\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235507_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n#include <inttypes.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = (int64_t)RAND64();\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            int64_t result = data * data;\n            printLongLongLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235546_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#include <math.h>\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(globalTrue)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = atoi(inputBuffer);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(globalTrue)\n    {\n        {\n            int result = data * data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235585_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#include <math.h>\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(staticFive==5)\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = atoi(inputBuffer);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(staticFive==5)\n    {\n        {\n            int result = data * data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,787]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235624_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(STATIC_CONST_TRUE)\n    {\n        fscanf(stdin, \"%d\", &data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            int result = data * data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[681,190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235663_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#include <math.h>\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = atoi(inputBuffer);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    {\n        int result = data * data;\n        printIntLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,681,190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235702_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#include <math.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int> dataVector)\n{\n    int data = dataVector[2];\n    {\n        int result = data * data;\n        printIntLine(result);\n    }\n}\n\n} #include <vector>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int> dataVector);\n\nvoid qazmlps()\n{\n    int data;\n    vector<int> dataVector;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = atoi(inputBuffer);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,602,805]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235741_1.txt"},"language":"lang-cpp","code":"\n\n#include <math.h>\n\n\n\nvoid ppoeidn(int dataArray[])\n{\n    int data = dataArray[2];\n    {\n        int result = data * data;\n        printIntLine(result);\n    }\n}\n\n\n\n#include <math.h>\n\n\n\nvoid ppoeidn(int dataArray[]);\n\nvoid qazmlps()\n{\n    int data;\n    int dataArray[5];\n    data = 0;\n    data = INT_MAX;\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235780_1.txt"},"language":"lang-cpp","code":"\n\n#include <math.h>\n\n\n\nvoid ppoeidn(int * dataPtr)\n{\n    int data = *dataPtr;\n    {\n        int result = data * data;\n        printIntLine(result);\n    }\n}\n\n\n\n#include <math.h>\n\n\n\nvoid ppoeidn(int * dataPtr);\n\nvoid qazmlps()\n{\n    int data;\n    data = 0;\n    data = RAND32();\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235819_1.txt"},"language":"lang-cpp","code":"\n\n#include <math.h>\n\n\n\nvoid qazmlps(unsigned int data);\n\nvoid ppoeidn(unsigned int data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <math.h>\n\n\n\nvoid qazmlps(unsigned int data)\n{\n    {\n        unsigned int result = data * data;\n        printUnsignedLine(result);\n    }\n}\n\n\n\n#include <math.h>\n\n\n\nvoid ppoeidn(unsigned int data);\n\nvoid func7()\n{\n    unsigned int data;\n    data = 0;\n    fscanf (stdin, \"%u\", &data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235858_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n\n\n\nstatic void ppoeidn(unsigned int data)\n{\n    {\n        unsigned int result = data * data;\n        printUnsignedLine(result);\n    }\n}\n\nvoid qhwystdd()\n{\n    unsigned int data;\n    void (*funcPtr) (unsigned int) = ppoeidn;\n    data = 0;\n    data = UINT_MAX;\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235897_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <math.h>\n\n\n\nstatic void ppoeidn(unsigned int data)\n{\n    {\n        unsigned int result = data * data;\n        printUnsignedLine(result);\n    }\n}\n\nvoid qhwystdd()\n{\n    unsigned int data;\n    data = 0;\n    data = (unsigned int)RAND32();\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235936_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    char *dataPtr1 = &data;\n    char *dataPtr2 = &data;\n    data = ' ';\n    {\n        char data = *dataPtr1;\n        fscanf (stdin, \"%c\", &data);\n        *dataPtr1 = data;\n    }\n    {\n        char data = *dataPtr2;\n        {\n            data++;\n            char result = data;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,787]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000235975_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\ntypedef union\n{\n    char unionFirst;\n    char unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    var1 myUnion;\n    data = ' ';\n    data = CHAR_MAX;\n    myUnion.unionFirst = data;\n    {\n        char data = myUnion.unionSecond;\n        {\n            data++;\n            char result = data;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236014_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic void ppoeidn(char data)\n{\n    {\n        data++;\n        char result = data;\n        printHexCharLine(result);\n    }\n}\n\nvoid qhwystdd()\n{\n    char data;\n    data = ' ';\n    data = (char)RAND32();\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[682]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236053_1.txt"},"language":"lang-cpp","code":"#include <inttypes.h>\n#include \"std_testcase.h\"\n\n\n\nstatic int64_t ppoeidn(int64_t data)\n{\n    fscanf (stdin, \"%\" SCNd64, &data);\n    return data;\n}\n\nvoid qhwystdd()\n{\n    int64_t data;\n    data = 0LL;\n    data = ppoeidn(data);\n    {\n        data++;\n        int64_t result = data;\n        printLongLongLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236092_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic void ppoeidn(int64_t data)\n{\n    {\n        data++;\n        int64_t result = data;\n        printLongLongLine(result);\n    }\n}\n\nvoid qhwystdd()\n{\n    int64_t data;\n    void (*funcPtr) (int64_t) = ppoeidn;\n    data = 0LL;\n    data = LLONG_MAX;\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236131_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int64_t var1;\nstatic int64_t var2;\nstatic int64_t var3;\n\n\n\nstatic void ppoeidn()\n{\n    int64_t data = var1;\n    {\n        data++;\n        int64_t result = data;\n        printLongLongLine(result);\n    }\n}\n\nvoid qhwystdd()\n{\n    int64_t data;\n    data = 0LL;\n    data = (int64_t)RAND64();\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236170_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn(int data)\n{\n    {\n        data++;\n        int result = data;\n        printIntLine(result);\n    }\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn(int data);\n\nvoid qazmlps()\n{\n    int data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = atoi(inputBuffer);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,676]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236209_1.txt"},"language":"lang-cpp","code":"\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid qazmlps(int data);\n\nvoid ppoeidn(int data)\n{\n    qazmlps(data);\n}\n\n\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid qazmlps(int data)\n{\n    {\n        data++;\n        int result = data;\n        printIntLine(result);\n    }\n}\n\n\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn(int data);\n\nvoid func7()\n{\n    int data;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = atoi(inputBuffer);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236248_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid qazmlps(int data);\n\nvoid ppoeidn(int data)\n{\n    qazmlps(data);\n}\n\n\n\n\n\nvoid func7(int data);\n\nvoid qazmlps(int data)\n{\n    func7(data);\n}\n\n\n\n\n\nvoid func7(int data)\n{\n    {\n        data++;\n        int result = data;\n        printIntLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(int data);\n\nvoid ppoeidn0()\n{\n    int data;\n    data = 0;\n    fscanf(stdin, \"%d\", &data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236287_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid qazmlps(int data);\n\nvoid ppoeidn(int data)\n{\n    qazmlps(data);\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid func7(int data);\n\nvoid qazmlps(int data)\n{\n    func7(data);\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn0(int data);\n\nvoid func7(int data)\n{\n    ppoeidn0(data);\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn0(int data)\n{\n    {\n        data++;\n        int result = data;\n        printIntLine(result);\n    }\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn(int data);\n\nvoid ppoeidn3()\n{\n    int data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = atoi(inputBuffer);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,601]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236326_1.txt"},"language":"lang-cpp","code":"\n\n\n\nint ppoeidn(int data)\n{\n    data = INT_MAX;\n    return data;\n}\n\n\n\n\n\nint ppoeidn(int data);\n\nvoid qazmlps()\n{\n    int data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        data++;\n        int result = data;\n        printIntLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236365_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(int * dataPtr)\n{\n    int data = *dataPtr;\n    {\n        data++;\n        int result = data;\n        printIntLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(int * dataPtr);\n\nvoid qazmlps()\n{\n    int data;\n    data = 0;\n    data = RAND32();\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236404_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    short * dataPtr = (short *)dataVoidPtr;\n    short data = (*dataPtr);\n    {\n        data++;\n        short result = data;\n        printIntLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    short data;\n    data = 0;\n    fscanf (stdin, \"%hd\", &data);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,787]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236443_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(short data)\n{\n    {\n        data++;\n        short result = data;\n        printIntLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(short data);\n\nvoid qazmlps()\n{\n    short data;\n    void (*funcPtr) (short) = ppoeidn;\n    data = 0;\n    data = SHRT_MAX;\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236482_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(short dataArray[])\n{\n    short data = dataArray[2];\n    {\n        data++;\n        short result = data;\n        printIntLine(result);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(short dataArray[]);\n\nvoid qazmlps()\n{\n    short data;\n    short dataArray[5];\n    data = 0;\n    data = (short)RAND32();\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236521_1.txt"},"language":"lang-cpp","code":"\n\ntypedef struct var1\n{\n    unsigned int structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    unsigned int data = myStruct.structFirst;\n    {\n        data++;\n        unsigned int result = data;\n        printUnsignedLine(result);\n    }\n}\n\n\n\ntypedef struct var1\n{\n    unsigned int structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid qazmlps()\n{\n    unsigned int data;\n    var2 myStruct;\n    data = 0;\n    fscanf (stdin, \"%u\", &data);\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236560_1.txt"},"language":"lang-cpp","code":"\n\nextern unsigned int var1;\nextern unsigned int var2;\nextern unsigned int var3;\n\n\n\nvoid ppoeidn()\n{\n    unsigned int data = var1;\n    {\n        data++;\n        unsigned int result = data;\n        printUnsignedLine(result);\n    }\n}\n\n\n\nunsigned int var1;\nunsigned int var2;\nunsigned int var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    unsigned int data;\n    data = 0;\n    data = UINT_MAX;\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236599_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    fscanf (stdin, \"%c\", &data);\n    {\n        ++data;\n        char result = data;\n        printHexCharLine(result);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236638_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    if(1)\n    {\n        data = CHAR_MAX;\n    }\n    if(1)\n    {\n        {\n            ++data;\n            char result = data;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236677_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    if(5==5)\n    {\n        data = (char)RAND32();\n    }\n    if(5==5)\n    {\n        {\n            ++data;\n            char result = data;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236716_1.txt"},"language":"lang-cpp","code":"#include <inttypes.h>\n#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    if(STATIC_CONST_TRUE)\n    {\n        fscanf (stdin, \"%\" SCNd64, &data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            ++data;\n            int64_t result = data;\n            printLongLongLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,664]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236755_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    if(staticTrue)\n    {\n        data = LLONG_MAX;\n    }\n    if(staticTrue)\n    {\n        {\n            ++data;\n            int64_t result = data;\n            printLongLongLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236794_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    int64_t data;\n    data = 0LL;\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = (int64_t)RAND64();\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            ++data;\n            int64_t result = data;\n            printLongLongLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236833_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(staticFive==5)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = atoi(inputBuffer);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(staticFive==5)\n    {\n        {\n            ++data;\n            int result = data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,676]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236872_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    int data;\n    data = 0;\n    if(staticReturnsTrue())\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = atoi(inputBuffer);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(staticReturnsTrue())\n    {\n        {\n            ++data;\n            int result = data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236911_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(GLOBAL_CONST_TRUE)\n    {\n        fscanf(stdin, \"%d\", &data);\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            ++data;\n            int result = data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236950_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(globalTrue)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = atoi(inputBuffer);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(globalTrue)\n    {\n        {\n            ++data;\n            int result = data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[674,789]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000236989_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(globalReturnsTrue())\n    {\n        data = INT_MAX;\n    }\n    if(globalReturnsTrue())\n    {\n        {\n            ++data;\n            int result = data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000237028_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = 0;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = RAND32();\n    }\n    else\n    {\n        data = 2;\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            ++data;\n            int result = data;\n            printIntLine(result);\n        }\n    }\n    else\n    {\n        if (data < INT_MAX)\n        {\n            ++data;\n            int result = data;\n            printIntLine(result);\n        }\n        else\n        {\n            printLine(\"data value is too large to perform arithmetic safely.\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[680]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000237067_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    short data;\n    data = 0;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        fscanf (stdin, \"%hd\", &data);\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            ++data;\n            short result = data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,664]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000237106_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    short data;\n    data = 0;\n    if(globalFive==5)\n    {\n        data = SHRT_MAX;\n    }\n    if(globalFive==5)\n    {\n        {\n            ++data;\n            short result = data;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000237145_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    short data;\n    data = 0;\n    switch(6)\n    {\n    case 6:\n        data = (short)RAND32();\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n    {\n        ++data;\n        short result = data;\n        printIntLine(result);\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-190"],"filename":"000237184_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    unsigned int data;\n    data = 0;\n    while(1)\n    {\n        fscanf (stdin, \"%u\", &data);\n        break;\n    }\n    while(1)\n    {\n        {\n            ++data;\n            unsigned int result = data;\n            printUnsignedLine(result);\n        }\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[788]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000002054_1.txt"},"language":"lang-cpp","code":"#include <iostream>\nusing namespace std;\n\n\nvoid function() {\n\tshort *p = 0;\n\ttry {\n                p = new short [1000];\n            }\n \tcatch (var1&)\n\t{\n\t  cout << \"Error allocating memory.\" << endl;\n\t}\n\n\tcout<<p;\n\treturn;\n}\n\nint main()\n{\n\tint i,j;\n\tcout<<\"Please enter two numbers: \"<<endl;\n\tcin>>i>>j;\n\t\n\twhile (i==j) function();\n\treturn 0;\n}","result":{"isCodeSecure":false,"CWEs":[401,672,476]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099247_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(char * dataCopy);\n    ~GenClass1();\n\nprivate:\n    char * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(char * dataCopy)\n{\n    data = dataCopy;\n    data = (char *)calloc(100, sizeof(char));\n    strcpy(data, \"A String\");\n    printLine(data);\n}\n\nGenClass1::~GenClass1()\n{\n    ; \n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,788]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099295_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(char * dataCopy);\n    ~GenClass1();\n\nprivate:\n    char * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(char * dataCopy)\n{\n    data = dataCopy;\n    data = (char *)malloc(100*sizeof(char));\n    strcpy(data, \"A String\");\n    printLine(data);\n}\n\nGenClass1::~GenClass1()\n{\n    ; \n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,788,411]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099343_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(char * dataCopy);\n    ~GenClass1();\n\nprivate:\n    char * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(char * dataCopy)\n{\n    data = dataCopy;\n    data = (char *)realloc(data, 100*sizeof(char));\n    strcpy(data, \"A String\");\n    printLine(data);\n}\n\nGenClass1::~GenClass1()\n{\n    ; \n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690,788,401,122]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099389_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap)\n{\n    int64_t * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    map<int, int64_t *> dataMap;\n    data = NULL;\n    data = (int64_t *)calloc(100, sizeof(int64_t));\n    data[0] = 5LL;\n    printLongLongLine(data[0]);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099437_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap)\n{\n    int64_t * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    map<int, int64_t *> dataMap;\n    data = NULL;\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    data[0] = 5LL;\n    printLongLongLine(data[0]);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,476,835]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099485_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap)\n{\n    int64_t * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    map<int, int64_t *> dataMap;\n    data = NULL;\n    data = (int64_t *)realloc(data, 100*sizeof(int64_t));\n    data[0] = 5LL;\n    printLongLongLine(data[0]);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,789,401,832]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099533_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap)\n{\n    int * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap);\n\nvoid qazmlps()\n{\n    int * data;\n    map<int, int *> dataMap;\n    data = NULL;\n    data = (int *)calloc(100, sizeof(int));\n    data[0] = 5;\n    printIntLine(data[0]);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099581_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap)\n{\n    int * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap);\n\nvoid qazmlps()\n{\n    int * data;\n    map<int, int *> dataMap;\n    data = NULL;\n    data = (int *)malloc(100*sizeof(int));\n    data[0] = 5;\n    printIntLine(data[0]);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099629_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap)\n{\n    int * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap);\n\nvoid qazmlps()\n{\n    int * data;\n    map<int, int *> dataMap;\n    data = NULL;\n    data = (int *)realloc(data, 100*sizeof(int));\n    data[0] = 5;\n    printIntLine(data[0]);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,476,789,835]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099755_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalFive==5)\n    {\n        data = new char[100];\n        strcpy(data, \"A String\");\n        printLine(data);\n    }\n    if(globalFive==5)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,672]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099771_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(char * data);\n\nvoid ppoeidn(char * data)\n{\n    qazmlps(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data);\n\nvoid qazmlps(char * data)\n{\n    func7(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data)\n{\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * data);\n\nvoid ppoeidn0()\n{\n    char * data;\n    data = NULL;\n    data = new char[100];\n    strcpy(data, \"A String\");\n    printLine(data);\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789,690,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099787_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = new TwoIntsClass;\n        data->intOne = 0;\n        data->intTwo = 0;\n        printIntLine(data->intOne);\n        printIntLine(data->intTwo);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099803_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nextern int var1;\n\nvoid ppoeidn(TwoIntsClass * data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(TwoIntsClass * data);\n\nvoid uytvbdk()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass;\n    data->intOne = 0;\n    data->intTwo = 0;\n    printIntLine(data->intOne);\n    printIntLine(data->intTwo);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099819_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    TwoIntsClass * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    TwoIntsClass * data = myStruct.structFirst;\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    TwoIntsClass * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    structType myStruct;\n    data = NULL;\n    data = new TwoIntsClass;\n    data->intOne = 0;\n    data->intTwo = 0;\n    printIntLine(data->intOne);\n    printIntLine(data->intTwo);\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099835_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(globalTrue)\n    {\n        data = new TwoIntsClass[100];\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printIntLine(data[0].intOne);\n        printIntLine(data[0].intTwo);\n    }\n    if(globalTrue)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099851_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(TwoIntsClass * data)\n{\n    ; \n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    void (*funcPtr) (TwoIntsClass *) = ppoeidn;\n    data = NULL;\n    data = new TwoIntsClass[100];\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printIntLine(data[0].intOne);\n    printIntLine(data[0].intTwo);\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099867_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(TwoIntsClass * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(TwoIntsClass * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(TwoIntsClass * data)\n{\n    ; \n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass[100];\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printIntLine(data[0].intOne);\n    printIntLine(data[0].intTwo);\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099883_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    while(1)\n    {\n        data = new int64_t[100];\n        data[0] = 5LL;\n        printLongLongLine(data[0]);\n        break;\n    }\n    while(1)\n    {\n        ; \n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099899_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * * dataPtr)\n{\n    int64_t * data = *dataPtr;\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * * dataPtr);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    data = NULL;\n    data = new int64_t[100];\n    data[0] = 5LL;\n    printLongLongLine(data[0]);\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099915_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nstatic const int STATIC_CONST_FIVE = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = new int[100];\n        data[0] = 5;\n        printIntLine(data[0]);\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099931_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    int * *dataPtr1 = &data;\n    int * *dataPtr2 = &data;\n    data = NULL;\n    {\n        int * data = *dataPtr1;\n        data = new int[100];\n        data[0] = 5;\n        printIntLine(data[0]);\n        *dataPtr1 = data;\n    }\n    {\n        int * data = *dataPtr2;\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099947_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int *> dataVector)\n{\n    int * data = dataVector[2];\n    ; \n}\n\n} #include <vector>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int *> dataVector);\n\nvoid qazmlps()\n{\n    int * data;\n    vector<int *> dataVector;\n    data = NULL;\n    data = new int[100];\n    data[0] = 5;\n    printIntLine(data[0]);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099963_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = new struct _twoIntsStruct[100];\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n    }\n    else\n    {\n        struct _twoIntsStruct var2[100];\n        data = var2;\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        ; \n    }\n    else\n    {\n        delete[] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099979_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * data)\n{\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    data = new struct _twoIntsStruct[100];\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine((twoIntsStruct *)&data[0]);\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000099995_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(1)\n    {\n        data = new twoIntsStruct[100];\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine(&data[0]);\n    }\n    if(1)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100011_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    goto source;\nsource:\n    data = new twoIntsStruct[100];\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine(&data[0]);\n    goto var2;\nvar2:\n    ; \n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100027_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    void (*funcPtr) (twoIntsStruct *) = ppoeidn;\n    data = NULL;\n    data = new twoIntsStruct[100];\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine(&data[0]);\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100043_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\nnamespace var1\n{\n\n\n\nvoid xnzxbnd()\n{\n    wchar_t * data;\n    data = NULL;\n    if(staticReturnsTrue())\n    {\n        data = new wchar_t[100];\n        wcscpy(data, L\"A String\");\n        printWLine(data);\n    }\n    if(staticReturnsTrue())\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100059_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\ntypedef union\n{\n    wchar_t * unionFirst;\n    wchar_t * unionSecond;\n} unionType;\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    unionType myUnion;\n    data = NULL;\n    data = new wchar_t[100];\n    wcscpy(data, L\"A String\");\n    printWLine(data);\n    myUnion.unionFirst = data;\n    {\n        wchar_t * data = myUnion.unionSecond;\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100075_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, wchar_t *> dataMap)\n{\n    wchar_t * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, wchar_t *> dataMap);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    map<int, wchar_t *> dataMap;\n    data = NULL;\n    data = new wchar_t[100];\n    wcscpy(data, L\"A String\");\n    printWLine(data);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100091_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalFive==5)\n    {\n        data = new char;\n        *data = 'A';\n        printHexCharLine(*data);\n    }\n    if(globalFive==5)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100107_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(char * data);\n\nvoid ppoeidn(char * data)\n{\n    qazmlps(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data);\n\nvoid qazmlps(char * data)\n{\n    func7(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data)\n{\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * data);\n\nvoid ppoeidn0()\n{\n    char * data;\n    data = NULL;\n    data = new char;\n    *data = 'A';\n    printHexCharLine(*data);\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100123_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = new int64_t;\n        *data = 5LL;\n        printLongLongLine(*data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100139_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nextern int var1;\n\nvoid ppoeidn(int64_t * data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(int64_t * data);\n\nvoid uytvbdk()\n{\n    int64_t * data;\n    data = NULL;\n    data = new int64_t;\n    *data = 5LL;\n    printLongLongLine(*data);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100155_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    int64_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    int64_t * data = myStruct.structFirst;\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    int64_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    structType myStruct;\n    data = NULL;\n    data = new int64_t;\n    *data = 5LL;\n    printLongLongLine(*data);\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,772]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100171_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(globalTrue)\n    {\n        data = new int;\n        *data = 5;\n        printIntLine(*data);\n    }\n    if(globalTrue)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100187_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(int * data)\n{\n    ; \n}\n\nvoid qhwystdd()\n{\n    int * data;\n    void (*funcPtr) (int *) = ppoeidn;\n    data = NULL;\n    data = new int;\n    *data = 5;\n    printIntLine(*data);\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100203_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int * data)\n{\n    ; \n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    *data = 5;\n    printIntLine(*data);\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,772]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100219_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    while(1)\n    {\n        data = new struct _twoIntsStruct;\n        data->intOne = 0;\n        data->intTwo = 0;\n        printStructLine((twoIntsStruct *)data);\n        break;\n    }\n    while(1)\n    {\n        ; \n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100235_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * * dataPtr)\n{\n    struct _twoIntsStruct * data = *dataPtr;\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * * dataPtr);\n\nvoid qazmlps()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    data = new struct _twoIntsStruct;\n    data->intOne = 0;\n    data->intTwo = 0;\n    printStructLine((twoIntsStruct *)data);\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100251_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nstatic const int STATIC_CONST_FIVE = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = new twoIntsStruct;\n        data->intOne = 0;\n        data->intTwo = 0;\n        printStructLine(data);\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100267_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    twoIntsStruct * *dataPtr1 = &data;\n    twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        twoIntsStruct * data = *dataPtr1;\n        data = new twoIntsStruct;\n        data->intOne = 0;\n        data->intTwo = 0;\n        printStructLine(data);\n        *dataPtr1 = data;\n    }\n    {\n        twoIntsStruct * data = *dataPtr2;\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100283_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<twoIntsStruct *> dataVector)\n{\n    twoIntsStruct * data = dataVector[2];\n    ; \n}\n\n} #include <vector>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<twoIntsStruct *> dataVector);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    vector<twoIntsStruct *> dataVector;\n    data = NULL;\n    data = new twoIntsStruct;\n    data->intOne = 0;\n    data->intTwo = 0;\n    printStructLine(data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,416,824]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100299_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = new wchar_t;\n        *data = L'A';\n        printHexCharLine((char)*data);\n    }\n    else\n    {\n        wchar_t var2;\n        data = &var2;\n        *data = L'A';\n        printHexCharLine((char)*data);\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        ; \n    }\n    else\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100315_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * data)\n{\n    ; \n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * data);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t;\n    *data = L'A';\n    printHexCharLine((char)*data);\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100331_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(1)\n    {\n        {\n            char myString[] = \"myString\";\n            data = strdup(myString);\n            printLine(data);\n        }\n    }\n    if(1)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100347_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    goto source;\nsource:\n    {\n        char myString[] = \"myString\";\n        data = strdup(myString);\n        printLine(data);\n    }\n    goto var1;\nvar1:\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100363_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nchar * ppoeidn(char * data)\n{\n    {\n        char myString[] = \"myString\";\n        data = strdup(myString);\n        printLine(data);\n    }\n    return data;\n}\n\n\n\n#include <wchar.h>\n\n\n\nchar * ppoeidn(char * data);\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    data = ppoeidn(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100379_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(1)\n    {\n        {\n            wchar_t myString[] = L\"myString\";\n            data = wcsdup(myString);\n            printWLine(data);\n        }\n    }\n    if(1)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100395_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    goto source;\nsource:\n    {\n        wchar_t myString[] = L\"myString\";\n        data = wcsdup(myString);\n        printWLine(data);\n    }\n    goto var1;\nvar1:\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":true,"CWEs":[]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100411_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nwchar_t * ppoeidn(wchar_t * data)\n{\n    {\n        wchar_t myString[] = L\"myString\";\n        data = wcsdup(myString);\n        printWLine(data);\n    }\n    return data;\n}\n\n\n\n#include <wchar.h>\n\n\n\nwchar_t * ppoeidn(wchar_t * data);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    data = ppoeidn(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100455_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * data)\n{\n    ; \n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine((twoIntsStruct *)&data[0]);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100503_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * data)\n{\n    ; \n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine((twoIntsStruct *)&data[0]);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100551_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * data)\n{\n    ; \n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(struct _twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine((twoIntsStruct *)&data[0]);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,787,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100599_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    ; \n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine(&data[0]);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100647_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    ; \n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine(&data[0]);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100695_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    ; \n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));\n    data[0].intOne = 0;\n    data[0].intTwo = 0;\n    printStructLine(&data[0]);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,78,122,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100734_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nextern int var1;\n\nvoid ppoeidn(wchar_t * data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\n\n\n#include <wchar.h>\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(wchar_t * data);\n\nvoid uytvbdk()\n{\n    wchar_t * data;\n    data = NULL;\n    data = (wchar_t *)calloc(100, sizeof(wchar_t));\n    wcscpy(data, L\"A String\");\n    printWLine(data);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100782_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nextern int var1;\n\nvoid ppoeidn(wchar_t * data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\n\n\n#include <wchar.h>\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(wchar_t * data);\n\nvoid uytvbdk()\n{\n    wchar_t * data;\n    data = NULL;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    wcscpy(data, L\"A String\");\n    printWLine(data);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,788]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000100830_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nextern int var1;\n\nvoid ppoeidn(wchar_t * data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\n\n\n#include <wchar.h>\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(wchar_t * data);\n\nvoid uytvbdk()\n{\n    wchar_t * data;\n    data = NULL;\n    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));\n    wcscpy(data, L\"A String\");\n    printWLine(data);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,78,122,676,824]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239387_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    data = (char *)calloc(100, sizeof(char));\n    if (data == NULL) {exit(-1);}\n    strcpy(data, \"A String\");\n    printLine(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,690]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239403_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    char * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (char *)calloc(100, sizeof(char));\n        if (data == NULL) {exit(-1);}\n        strcpy(data, \"A String\");\n        printLine(data);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239419_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    data = (char *)malloc(100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    strcpy(data, \"A String\");\n    printLine(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,676]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239435_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    char * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        strcpy(data, \"A String\");\n        printLine(data);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239451_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    data = (char *)realloc(data, 100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    strcpy(data, \"A String\");\n    printLine(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,122,676]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239467_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    char * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (char *)realloc(data, 100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        strcpy(data, \"A String\");\n        printLine(data);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239483_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    data = (int64_t *)calloc(100, sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = 5LL;\n    printLongLongLine(data[0]);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239499_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int64_t * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (int64_t *)calloc(100, sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        data[0] = 5LL;\n        printLongLongLine(data[0]);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239515_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = 5LL;\n    printLongLongLine(data[0]);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239531_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int64_t * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        data[0] = 5LL;\n        printLongLongLine(data[0]);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239547_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    data = (int64_t *)realloc(data, 100*sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = 5LL;\n    printLongLongLine(data[0]);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239563_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int64_t * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (int64_t *)realloc(data, 100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        data[0] = 5LL;\n        printLongLongLine(data[0]);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[484,772]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239579_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    data = (int *)calloc(100, sizeof(int));\n    if (data == NULL) {exit(-1);}\n    data[0] = 5;\n    printIntLine(data[0]);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[434]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239595_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (int *)calloc(100, sizeof(int));\n        if (data == NULL) {exit(-1);}\n        data[0] = 5;\n        printIntLine(data[0]);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239611_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    data = (int *)malloc(100*sizeof(int));\n    if (data == NULL) {exit(-1);}\n    data[0] = 5;\n    printIntLine(data[0]);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239627_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        data[0] = 5;\n        printIntLine(data[0]);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239643_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    data = (int *)realloc(data, 100*sizeof(int));\n    if (data == NULL) {exit(-1);}\n    data[0] = 5;\n    printIntLine(data[0]);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,772]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239659_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (int *)realloc(data, 100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        data[0] = 5;\n        printIntLine(data[0]);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239675_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n\n\nvoid ppoeidn()\n{\n    {\n        char * data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        strcpy(data, \"A String\");\n        printLine(data);\n        data = (char *)realloc(data, (130000)*sizeof(char));\n        if (data != NULL)\n        {\n            strcpy(data, \"New String\");\n            printLine(data);\n            free(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[122,788,401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239691_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            char * data = (char *)malloc(100*sizeof(char));\n            if (data == NULL) {exit(-1);}\n            strcpy(data, \"A String\");\n            printLine(data);\n            data = (char *)realloc(data, (130000)*sizeof(char));\n            if (data != NULL)\n            {\n                strcpy(data, \"New String\");\n                printLine(data);\n                free(data);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,122,401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239707_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n\n\nvoid ppoeidn()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        data[0] = 5LL;\n        printLongLongLine(data[0]);\n        data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));\n        if (data != NULL)\n        {\n            data[0] = 10LL;\n            printLongLongLine(data[0]);\n            free(data);\n        }\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[122,787,401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239723_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n\n\nvoid ppoeidn()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            int * data = (int *)malloc(100*sizeof(int));\n            if (data == NULL) {exit(-1);}\n            data[0] = 5;\n            printIntLine(data[0]);\n            data = (int *)realloc(data, (130000)*sizeof(int));\n            if (data != NULL)\n            {\n                data[0] = 10;\n                printIntLine(data[0]);\n                free(data);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239739_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n\n\nvoid ppoeidn()\n{\n    if(globalReturnsTrue())\n    {\n        {\n            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\n            if (data == NULL) {exit(-1);}\n            data[0].intOne = 0;\n            data[0].intTwo = 0;\n            printStructLine((twoIntsStruct *)&data[0]);\n            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));\n            if (data != NULL)\n            {\n                data[0].intOne = 1;\n                data[0].intTwo = 1;\n                printStructLine((twoIntsStruct *)&data[0]);\n                free(data);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[400,190,787]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239755_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n\n\nvoid ppoeidn()\n{\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n            if (data == NULL) {exit(-1);}\n            data[0].intOne = 0;\n            data[0].intTwo = 0;\n            printStructLine(&data[0]);\n            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));\n            if (data != NULL)\n            {\n                data[0].intOne = 1;\n                data[0].intTwo = 1;\n                printStructLine(&data[0]);\n                free(data);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,787,401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239771_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    if(staticFive==5)\n    {\n        {\n            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));\n            if (data == NULL) {exit(-1);}\n            wcscpy(data, L\"A String\");\n            printWLine(data);\n            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));\n            if (data != NULL)\n            {\n                wcscpy(data, L\"New String\");\n                printWLine(data);\n                free(data);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,122,400]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239787_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n    }\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239803_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    struct _twoIntsStruct * *dataPtr1 = &data;\n    struct _twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        struct _twoIntsStruct * data = *dataPtr1;\n        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n        *dataPtr1 = data;\n    }\n    {\n        struct _twoIntsStruct * data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239819_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n    }\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239835_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    struct _twoIntsStruct * *dataPtr1 = &data;\n    struct _twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        struct _twoIntsStruct * data = *dataPtr1;\n        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n        *dataPtr1 = data;\n    }\n    {\n        struct _twoIntsStruct * data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239851_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n    }\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,772]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239867_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    struct _twoIntsStruct * *dataPtr1 = &data;\n    struct _twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        struct _twoIntsStruct * data = *dataPtr1;\n        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n        *dataPtr1 = data;\n    }\n    {\n        struct _twoIntsStruct * data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239883_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine(&data[0]);\n    }\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239899_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    twoIntsStruct * *dataPtr1 = &data;\n    twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        twoIntsStruct * data = *dataPtr1;\n        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine(&data[0]);\n        *dataPtr1 = data;\n    }\n    {\n        twoIntsStruct * data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239915_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine(&data[0]);\n    }\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239931_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    twoIntsStruct * *dataPtr1 = &data;\n    twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        twoIntsStruct * data = *dataPtr1;\n        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine(&data[0]);\n        *dataPtr1 = data;\n    }\n    {\n        twoIntsStruct * data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239947_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine(&data[0]);\n    }\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,788]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239963_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    twoIntsStruct * *dataPtr1 = &data;\n    twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        twoIntsStruct * data = *dataPtr1;\n        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine(&data[0]);\n        *dataPtr1 = data;\n    }\n    {\n        twoIntsStruct * data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239979_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (wchar_t *)calloc(100, sizeof(wchar_t));\n        if (data == NULL) {exit(-1);}\n        wcscpy(data, L\"A String\");\n        printWLine(data);\n    }\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[785]}},{"data":{"cwe_ids":["CWE-401"],"filename":"000239995_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    wchar_t * *dataPtr1 = &data;\n    wchar_t * *dataPtr2 = &data;\n    data = NULL;\n    {\n        wchar_t * data = *dataPtr1;\n        data = (wchar_t *)calloc(100, sizeof(wchar_t));\n        if (data == NULL) {exit(-1);}\n        wcscpy(data, L\"A String\");\n        printWLine(data);\n        *dataPtr1 = data;\n    }\n    {\n        wchar_t * data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101262_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nextern int var1;\n\nvoid ppoeidn(char * data)\n{\n    if(var1)\n    {\n        free(data);\n    }\n}\n\n\n\n#include <wchar.h>\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(char * data);\n\nvoid uytvbdk()\n{\n    char * data;\n    data = NULL;\n    data = (char *)malloc(100*sizeof(char));\n    free(data);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101282_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\ntypedef struct var1\n{\n    char * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    char * data = myStruct.structFirst;\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\ntypedef struct var1\n{\n    char * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid qazmlps()\n{\n    char * data;\n    var2 myStruct;\n    data = NULL;\n    data = (char *)malloc(100*sizeof(char));\n    free(data);\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101321_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(int64_t * data);\n\nvoid ppoeidn(int64_t * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(int64_t * data)\n{\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int64_t * data);\n\nvoid func7()\n{\n    int64_t * data;\n    data = NULL;\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    free(data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101332_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int64_t *> dataVector)\n{\n    int64_t * data = dataVector[2];\n    free(data);\n}\n\n} #include <vector>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int64_t *> dataVector);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    vector<int64_t *> dataVector;\n    data = NULL;\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    free(data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,476,823]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101371_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(int * data);\n\nvoid ppoeidn(int * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(int * data);\n\nvoid qazmlps(int * data)\n{\n    func7(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn0(int * data);\n\nvoid func7(int * data)\n{\n    ppoeidn0(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn0(int * data)\n{\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * data);\n\nvoid ppoeidn3()\n{\n    int * data;\n    data = NULL;\n    data = (int *)malloc(100*sizeof(int));\n    free(data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664,762]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101382_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap)\n{\n    int * data = dataMap[2];\n    free(data);\n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap);\n\nvoid qazmlps()\n{\n    int * data;\n    map<int, int *> dataMap;\n    data = NULL;\n    data = (int *)malloc(100*sizeof(int));\n    free(data);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,476]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101423_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    long * * dataPtr = (long * *)dataVoidPtr;\n    long * data = (*dataPtr);\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    long * data;\n    data = NULL;\n    data = (long *)malloc(100*sizeof(long));\n    free(data);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101434_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(long * dataCopy);\n    ~GenClass1();\n\nprivate:\n    long * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(long * dataCopy)\n{\n    data = dataCopy;\n    data = (long *)malloc(100*sizeof(long));\n    free(data);\n}\n\nGenClass1::~GenClass1()\n{\n    free(data);\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    long * data;\n    data = NULL;\n    GenClass1 * var1 = new GenClass1(data);\n    delete var1;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,401]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101473_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * dataArray[])\n{\n    twoIntsStruct * data = dataArray[2];\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * dataArray[]);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    twoIntsStruct * dataArray[5];\n    data = NULL;\n    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n    free(data);\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664,823]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101512_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(wchar_t * data)\n{\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(wchar_t * data);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    free(data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,624]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101523_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nextern wchar_t * var1;\nextern wchar_t * var2;\nextern wchar_t * var3;\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data = var1;\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\nwchar_t * var1;\nwchar_t * var2;\nwchar_t * var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    free(data);\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101534_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = new char[100];\n        delete [] data;\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101543_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new char[100];\n        delete [] data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101552_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    char * *dataPtr1 = &data;\n    char * *dataPtr2 = &data;\n    data = NULL;\n    {\n        char * data = *dataPtr1;\n        data = new char[100];\n        delete [] data;\n        *dataPtr1 = data;\n    }\n    {\n        char * data = *dataPtr2;\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101561_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(char * data);\n\nvoid ppoeidn(char * data)\n{\n    qazmlps(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(char * data)\n{\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * data);\n\nvoid func7()\n{\n    char * data;\n    data = NULL;\n    data = new char[100];\n    delete [] data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101570_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    char * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    char * data = myStruct.structFirst;\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    char * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    char * data;\n    structType myStruct;\n    data = NULL;\n    data = new char[100];\n    delete [] data;\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101579_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass[100];\n    delete [] data;\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[415]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101588_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(globalTrue)\n    {\n        data = new TwoIntsClass[100];\n        delete [] data;\n    }\n    if(globalTrue)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101597_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic int var2 = 0;\n\nstatic void ppoeidn(TwoIntsClass * data)\n{\n    if(var2)\n    {\n        delete [] data;\n    }\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass[100];\n    delete [] data;\n    var2 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101606_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(TwoIntsClass * data)\n{\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    void (*funcPtr) (TwoIntsClass *) = ppoeidn;\n    data = NULL;\n    data = new TwoIntsClass[100];\n    delete [] data;\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101615_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    TwoIntsClass * * dataPtr = (TwoIntsClass * *)dataVoidPtr;\n    TwoIntsClass * data = (*dataPtr);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass[100];\n    delete [] data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101624_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(TwoIntsClass * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(TwoIntsClass * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(TwoIntsClass * data)\n{\n    delete [] data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass[100];\n    delete [] data;\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101633_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new int64_t[100];\n        delete [] data;\n    }\n    if(staticFive==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101642_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    while(1)\n    {\n        data = new int64_t[100];\n        delete [] data;\n        break;\n    }\n    while(1)\n    {\n        delete [] data;\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101651_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(int64_t * data)\n{\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    data = NULL;\n    data = new int64_t[100];\n    delete [] data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101660_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nint64_t * ppoeidn(int64_t * data)\n{\n    data = new int64_t[100];\n    delete [] data;\n    return data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nint64_t * ppoeidn(int64_t * data);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    data = NULL;\n    data = ppoeidn(data);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,600]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101669_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int64_t *> dataList)\n{\n    int64_t * data = dataList.back();\n    delete [] data;\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int64_t *> dataList);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    list<int64_t *> dataList;\n    data = NULL;\n    data = new int64_t[100];\n    delete [] data;\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672,476]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101678_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = new int[100];\n        delete [] data;\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101687_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new int[100];\n        delete [] data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101696_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    int * *dataPtr1 = &data;\n    int * *dataPtr2 = &data;\n    data = NULL;\n    {\n        int * data = *dataPtr1;\n        data = new int[100];\n        delete [] data;\n        *dataPtr1 = data;\n    }\n    {\n        int * data = *dataPtr2;\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101705_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(int * data);\n\nvoid ppoeidn(int * data)\n{\n    qazmlps(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(int * data)\n{\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int * data);\n\nvoid func7()\n{\n    int * data;\n    data = NULL;\n    data = new int[100];\n    delete [] data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101714_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    int * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    int * data = myStruct.structFirst;\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    int * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    int * data;\n    structType myStruct;\n    data = NULL;\n    data = new int[100];\n    delete [] data;\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101723_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    data = new long[100];\n    delete [] data;\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101732_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(globalTrue)\n    {\n        data = new long[100];\n        delete [] data;\n    }\n    if(globalTrue)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101741_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic int var2 = 0;\n\nstatic void ppoeidn(long * data)\n{\n    if(var2)\n    {\n        delete [] data;\n    }\n}\n\nvoid qhwystdd()\n{\n    long * data;\n    data = NULL;\n    data = new long[100];\n    delete [] data;\n    var2 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101750_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(long * data)\n{\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    long * data;\n    void (*funcPtr) (long *) = ppoeidn;\n    data = NULL;\n    data = new long[100];\n    delete [] data;\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101759_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    long * * dataPtr = (long * *)dataVoidPtr;\n    long * data = (*dataPtr);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    long * data;\n    data = NULL;\n    data = new long[100];\n    delete [] data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101768_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(long * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(long * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(long * data)\n{\n    delete [] data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    long * data;\n    data = NULL;\n    data = new long[100];\n    delete [] data;\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101777_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new twoIntsStruct[100];\n        delete [] data;\n    }\n    if(staticFive==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101786_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    while(1)\n    {\n        data = new twoIntsStruct[100];\n        delete [] data;\n        break;\n    }\n    while(1)\n    {\n        delete [] data;\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101795_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(twoIntsStruct * data)\n{\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = new twoIntsStruct[100];\n    delete [] data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101804_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\ntwoIntsStruct * ppoeidn(twoIntsStruct * data)\n{\n    data = new twoIntsStruct[100];\n    delete [] data;\n    return data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\ntwoIntsStruct * ppoeidn(twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = ppoeidn(data);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101813_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<twoIntsStruct *> dataList)\n{\n    twoIntsStruct * data = dataList.back();\n    delete [] data;\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<twoIntsStruct *> dataList);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    list<twoIntsStruct *> dataList;\n    data = NULL;\n    data = new twoIntsStruct[100];\n    delete [] data;\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664,415]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101822_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = new wchar_t[100];\n        delete [] data;\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101831_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new wchar_t[100];\n        delete [] data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101840_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    wchar_t * *dataPtr1 = &data;\n    wchar_t * *dataPtr2 = &data;\n    data = NULL;\n    {\n        wchar_t * data = *dataPtr1;\n        data = new wchar_t[100];\n        delete [] data;\n        *dataPtr1 = data;\n    }\n    {\n        wchar_t * data = *dataPtr2;\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101849_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(wchar_t * data);\n\nvoid ppoeidn(wchar_t * data)\n{\n    qazmlps(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(wchar_t * data)\n{\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * data);\n\nvoid func7()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t[100];\n    delete [] data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101858_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    wchar_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    wchar_t * data = myStruct.structFirst;\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    wchar_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    structType myStruct;\n    data = NULL;\n    data = new wchar_t[100];\n    delete [] data;\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[481,665,823]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101867_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    data = new char;\n    delete data;\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[415]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101876_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalTrue)\n    {\n        data = new char;\n        delete data;\n    }\n    if(globalTrue)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101885_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic int var2 = 0;\n\nstatic void ppoeidn(char * data)\n{\n    if(var2)\n    {\n        delete data;\n    }\n}\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    data = new char;\n    delete data;\n    var2 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101894_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(char * data)\n{\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    char * data;\n    void (*funcPtr) (char *) = ppoeidn;\n    data = NULL;\n    data = new char;\n    delete data;\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101903_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    char * * dataPtr = (char * *)dataVoidPtr;\n    char * data = (*dataPtr);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    data = new char;\n    delete data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101912_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(char * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(char * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(char * data)\n{\n    delete data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    data = new char;\n    delete data;\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101921_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new TwoIntsClass;\n        delete data;\n    }\n    if(staticFive==5)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101930_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    while(1)\n    {\n        data = new TwoIntsClass;\n        delete data;\n        break;\n    }\n    while(1)\n    {\n        delete data;\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101939_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(TwoIntsClass * data)\n{\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass;\n    delete data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101948_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nTwoIntsClass * ppoeidn(TwoIntsClass * data)\n{\n    data = new TwoIntsClass;\n    delete data;\n    return data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nTwoIntsClass * ppoeidn(TwoIntsClass * data);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = ppoeidn(data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101957_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<TwoIntsClass *> dataList)\n{\n    TwoIntsClass * data = dataList.back();\n    delete data;\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<TwoIntsClass *> dataList);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    list<TwoIntsClass *> dataList;\n    data = NULL;\n    data = new TwoIntsClass;\n    delete data;\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665,824]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101966_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = new int64_t;\n        delete data;\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101975_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new int64_t;\n        delete data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101984_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    int64_t * *dataPtr1 = &data;\n    int64_t * *dataPtr2 = &data;\n    data = NULL;\n    {\n        int64_t * data = *dataPtr1;\n        data = new int64_t;\n        delete data;\n        *dataPtr1 = data;\n    }\n    {\n        int64_t * data = *dataPtr2;\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000101993_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(int64_t * data);\n\nvoid ppoeidn(int64_t * data)\n{\n    qazmlps(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(int64_t * data)\n{\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * data);\n\nvoid func7()\n{\n    int64_t * data;\n    data = NULL;\n    data = new int64_t;\n    delete data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102002_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    int64_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    int64_t * data = myStruct.structFirst;\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    int64_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    structType myStruct;\n    data = NULL;\n    data = new int64_t;\n    delete data;\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102011_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    delete data;\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[415]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102020_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(globalTrue)\n    {\n        data = new int;\n        delete data;\n    }\n    if(globalTrue)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102029_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic int var2 = 0;\n\nstatic void ppoeidn(int * data)\n{\n    if(var2)\n    {\n        delete data;\n    }\n}\n\nvoid qhwystdd()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    delete data;\n    var2 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102038_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(int * data)\n{\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    int * data;\n    void (*funcPtr) (int *) = ppoeidn;\n    data = NULL;\n    data = new int;\n    delete data;\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102047_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    int * * dataPtr = (int * *)dataVoidPtr;\n    int * data = (*dataPtr);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    delete data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102056_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int * data)\n{\n    delete data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    delete data;\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665,476]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102065_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new long;\n        delete data;\n    }\n    if(staticFive==5)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102074_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    while(1)\n    {\n        data = new long;\n        delete data;\n        break;\n    }\n    while(1)\n    {\n        delete data;\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102083_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(long * data)\n{\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    long * data;\n    data = NULL;\n    data = new long;\n    delete data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102092_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nlong * ppoeidn(long * data)\n{\n    data = new long;\n    delete data;\n    return data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nlong * ppoeidn(long * data);\n\nvoid qazmlps()\n{\n    long * data;\n    data = NULL;\n    data = ppoeidn(data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102101_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<long *> dataList)\n{\n    long * data = dataList.back();\n    delete data;\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<long *> dataList);\n\nvoid qazmlps()\n{\n    long * data;\n    list<long *> dataList;\n    data = NULL;\n    data = new long;\n    delete data;\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672,476]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102110_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = new twoIntsStruct;\n        delete data;\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102119_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new twoIntsStruct;\n        delete data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102128_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    twoIntsStruct * *dataPtr1 = &data;\n    twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        twoIntsStruct * data = *dataPtr1;\n        data = new twoIntsStruct;\n        delete data;\n        *dataPtr1 = data;\n    }\n    {\n        twoIntsStruct * data = *dataPtr2;\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102137_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(twoIntsStruct * data);\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    qazmlps(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(twoIntsStruct * data)\n{\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid func7()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = new twoIntsStruct;\n    delete data;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102146_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    twoIntsStruct * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    twoIntsStruct * data = myStruct.structFirst;\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    twoIntsStruct * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    structType myStruct;\n    data = NULL;\n    data = new twoIntsStruct;\n    delete data;\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102155_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t;\n    delete data;\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[415]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102164_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(globalTrue)\n    {\n        data = new wchar_t;\n        delete data;\n    }\n    if(globalTrue)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102173_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic int var2 = 0;\n\nstatic void ppoeidn(wchar_t * data)\n{\n    if(var2)\n    {\n        delete data;\n    }\n}\n\nvoid qhwystdd()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t;\n    delete data;\n    var2 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102182_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(wchar_t * data)\n{\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    wchar_t * data;\n    void (*funcPtr) (wchar_t *) = ppoeidn;\n    data = NULL;\n    data = new wchar_t;\n    delete data;\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102191_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;\n    wchar_t * data = (*dataPtr);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t;\n    delete data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000102200_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(wchar_t * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(wchar_t * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(wchar_t * data)\n{\n    delete data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t;\n    delete data;\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690,476]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240075_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        free(data);\n    }\n    if(staticTrue)\n    {\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240084_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalFive==5)\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        free(data);\n    }\n    if(globalFive==5)\n    {\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240093_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\ntypedef union\n{\n    char * unionFirst;\n    char * unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    var1 myUnion;\n    data = NULL;\n    data = (char *)malloc(100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    free(data);\n    myUnion.unionFirst = data;\n    {\n        char * data = myUnion.unionSecond;\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240102_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(char * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(char * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(char * data)\n{\n    free(data);\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    data = (char *)malloc(100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    free(data);\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664,823]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240111_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        free(data);\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240120_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    goto source;\nsource:\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    free(data);\n    goto var1;\nvar1:\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240129_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nstatic void ppoeidn(int64_t * data)\n{\n    free(data);\n}\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    void (*funcPtr) (int64_t *) = ppoeidn;\n    data = NULL;\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    free(data);\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240138_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        free(data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240147_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        free(data);\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240156_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    int * &dataRef = data;\n    data = NULL;\n    data = (int *)malloc(100*sizeof(int));\n    if (data == NULL) {exit(-1);}\n    free(data);\n    {\n        int * data = dataRef;\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240165_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int * data) const\n{\n    free(data);\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    data = (int *)malloc(100*sizeof(int));\n    if (data == NULL) {exit(-1);}\n    free(data);\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664,762]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240174_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    long * data;\n    data = NULL;\n    if(staticReturnsTrue())\n    {\n        data = (long *)malloc(100*sizeof(long));\n        if (data == NULL) {exit(-1);}\n        free(data);\n    }\n    if(staticReturnsTrue())\n    {\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240183_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    long * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = (long *)malloc(100*sizeof(long));\n        if (data == NULL) {exit(-1);}\n        free(data);\n    }\n    for(j = 0; j < 1; j++)\n    {\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-415"],"filename":"000240192_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(long * &data)\n{\n    data = (long *)malloc(100*sizeof(long));\n    if (data == NULL) {exit(-1);}\n    free(data);\n}\n\nvoid qhwystdd()\n{\n    long * data;\n    data = NULL;\n    ppoeidn(data);\n    free(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102225_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(char * * dataPtr)\n{\n    char * data = *dataPtr;\n    printLine(data);\n    }\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(char * * dataPtr);\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    data = (char *)malloc(100*sizeof(char));\n    memset(data, 'A', 100-1);\n    data[100-1] = '\\0';\n    free(data);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690,824]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102269_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * * dataPtr)\n{\n    int * data = *dataPtr;\n    printIntLine(data[0]);\n    }\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * * dataPtr);\n\nvoid qazmlps()\n{\n    int * data;\n    data = NULL;\n    data = (int *)malloc(100*sizeof(int));\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i] = 5;\n        }\n    }\n    free(data);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102313_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * * dataPtr)\n{\n    twoIntsStruct * data = *dataPtr;\n    printStructLine(&data[0]);\n    }\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * * dataPtr);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i].intOne = 1;\n            data[i].intTwo = 2;\n        }\n    }\n    free(data);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102337_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    data = new char[100];\n    memset(data, 'A', 100-1);\n    data[100-1] = '\\0';\n    delete [] data;\n    printLine(data);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,676]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102341_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = new char[100];\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        delete [] data;\n    }\n    if(staticTrue)\n    {\n        printLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102345_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = new char[100];\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        delete [] data;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102349_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new char[100];\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        delete [] data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        printLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102353_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    char * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new char[100];\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        delete [] data;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102357_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * * dataPtr)\n{\n    char * data = *dataPtr;\n    printLine(data);\n    }\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * * dataPtr);\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    data = new char[100];\n    memset(data, 'A', 100-1);\n    data[100-1] = '\\0';\n    delete [] data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102361_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = new TwoIntsClass[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        delete [] data;\n    }\n    if(5==5)\n    {\n        printIntLine(data[0].intOne);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102365_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new TwoIntsClass[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        delete [] data;\n    }\n    if(staticFive==5)\n    {\n        printIntLine(data[0].intOne);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102369_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new TwoIntsClass[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        delete [] data;\n    }\n    if(globalReturnsTrue())\n    {\n        printIntLine(data[0].intOne);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102373_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = new TwoIntsClass[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        delete [] data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printIntLine(data[0].intOne);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102377_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * &data)\n{\n    data = new TwoIntsClass[100];\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i].intOne = 1;\n            data[i].intTwo = 2;\n        }\n    }\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    ppoeidn(data);\n    printIntLine(data[0].intOne);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102381_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    data = new int64_t[100];\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i] = 5LL;\n        }\n    }\n    delete [] data;\n    printLongLongLine(data[0]);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102385_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = new int64_t[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        delete [] data;\n    }\n    if(staticTrue)\n    {\n        printLongLongLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102389_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = new int64_t[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        delete [] data;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printLongLongLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102393_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new int64_t[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        delete [] data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        printLongLongLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102397_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int64_t * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new int64_t[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        delete [] data;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printLongLongLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102401_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * * dataPtr)\n{\n    int64_t * data = *dataPtr;\n    printLongLongLine(data[0]);\n    }\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * * dataPtr);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    data = NULL;\n    data = new int64_t[100];\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i] = 5LL;\n        }\n    }\n    delete [] data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102405_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = new int[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        delete [] data;\n    }\n    if(5==5)\n    {\n        printIntLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102409_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new int[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        delete [] data;\n    }\n    if(staticFive==5)\n    {\n        printIntLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102413_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new int[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        delete [] data;\n    }\n    if(globalReturnsTrue())\n    {\n        printIntLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102417_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = new int[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        delete [] data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printIntLine(data[0]);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102421_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(int * &data)\n{\n    data = new int[100];\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i] = 5;\n        }\n    }\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    int * data;\n    data = NULL;\n    ppoeidn(data);\n    printIntLine(data[0]);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102425_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    data = new long[100];\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i] = 5L;\n        }\n    }\n    delete [] data;\n    printLongLine(data[0]);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102429_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = new long[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        delete [] data;\n    }\n    if(staticTrue)\n    {\n        printLongLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102433_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = new long[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        delete [] data;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printLongLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102437_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new long[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        delete [] data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        printLongLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102441_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    long * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new long[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        delete [] data;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printLongLine(data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102445_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(long * * dataPtr)\n{\n    long * data = *dataPtr;\n    printLongLine(data[0]);\n    }\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(long * * dataPtr);\n\nvoid qazmlps()\n{\n    long * data;\n    data = NULL;\n    data = new long[100];\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i] = 5L;\n        }\n    }\n    delete [] data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,662]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102449_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = new twoIntsStruct[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        delete [] data;\n    }\n    if(5==5)\n    {\n        printStructLine(&data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102453_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new twoIntsStruct[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        delete [] data;\n    }\n    if(staticFive==5)\n    {\n        printStructLine(&data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102457_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new twoIntsStruct[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        delete [] data;\n    }\n    if(globalReturnsTrue())\n    {\n        printStructLine(&data[0]);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102461_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = new twoIntsStruct[100];\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        delete [] data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printStructLine(&data[0]);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102465_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * &data)\n{\n    data = new twoIntsStruct[100];\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i].intOne = 1;\n            data[i].intTwo = 2;\n        }\n    }\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    ppoeidn(data);\n    printStructLine(&data[0]);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102469_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t[100];\n    wmemset(data, L'A', 100-1);\n    data[100-1] = L'\\0';\n    delete [] data;\n    printWLine(data);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102473_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = new wchar_t[100];\n        wmemset(data, L'A', 100-1);\n        data[100-1] = L'\\0';\n        delete [] data;\n    }\n    if(staticTrue)\n    {\n        printWLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102477_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = new wchar_t[100];\n        wmemset(data, L'A', 100-1);\n        data[100-1] = L'\\0';\n        delete [] data;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printWLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102481_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new wchar_t[100];\n        wmemset(data, L'A', 100-1);\n        data[100-1] = L'\\0';\n        delete [] data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        printWLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102485_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    wchar_t * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new wchar_t[100];\n        wmemset(data, L'A', 100-1);\n        data[100-1] = L'\\0';\n        delete [] data;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printWLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102489_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * * dataPtr)\n{\n    wchar_t * data = *dataPtr;\n    printWLine(data);\n    }\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * * dataPtr);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t[100];\n    wmemset(data, L'A', 100-1);\n    data[100-1] = L'\\0';\n    delete [] data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102493_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = new char;\n        *data = 'A';\n        delete data;\n    }\n    if(5==5)\n    {\n        printHexCharLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102497_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new char;\n        *data = 'A';\n        delete data;\n    }\n    if(staticFive==5)\n    {\n        printHexCharLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102501_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new char;\n        *data = 'A';\n        delete data;\n    }\n    if(globalReturnsTrue())\n    {\n        printHexCharLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102505_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = new char;\n        *data = 'A';\n        delete data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printHexCharLine(*data);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102509_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(char * &data)\n{\n    data = new char;\n    *data = 'A';\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    ppoeidn(data);\n    printHexCharLine(*data);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102513_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass;\n    data->intOne = 1;\n    data->intTwo = 2;\n    delete data;\n    printIntLine(data->intOne);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102517_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = new TwoIntsClass;\n        data->intOne = 1;\n        data->intTwo = 2;\n        delete data;\n    }\n    if(staticTrue)\n    {\n        printIntLine(data->intOne);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102521_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = new TwoIntsClass;\n        data->intOne = 1;\n        data->intTwo = 2;\n        delete data;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printIntLine(data->intOne);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102525_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new TwoIntsClass;\n        data->intOne = 1;\n        data->intTwo = 2;\n        delete data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        printIntLine(data->intOne);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102529_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    TwoIntsClass * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new TwoIntsClass;\n        data->intOne = 1;\n        data->intTwo = 2;\n        delete data;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printIntLine(data->intOne);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102533_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * * dataPtr)\n{\n    TwoIntsClass * data = *dataPtr;\n    printIntLine(data->intOne);\n    }\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * * dataPtr);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass;\n    data->intOne = 1;\n    data->intTwo = 2;\n    delete data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102537_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = new int64_t;\n        *data = 5LL;\n        delete data;\n    }\n    if(5==5)\n    {\n        printLongLongLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102541_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new int64_t;\n        *data = 5LL;\n        delete data;\n    }\n    if(staticFive==5)\n    {\n        printLongLongLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102545_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new int64_t;\n        *data = 5LL;\n        delete data;\n    }\n    if(globalReturnsTrue())\n    {\n        printLongLongLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102549_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = new int64_t;\n        *data = 5LL;\n        delete data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printLongLongLine(*data);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102553_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(int64_t * &data)\n{\n    data = new int64_t;\n    *data = 5LL;\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    data = NULL;\n    ppoeidn(data);\n    printLongLongLine(*data);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102557_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    *data = 5;\n    delete data;\n    printIntLine(*data);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102561_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = new int;\n        *data = 5;\n        delete data;\n    }\n    if(staticTrue)\n    {\n        printIntLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102565_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = new int;\n        *data = 5;\n        delete data;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printIntLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102569_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new int;\n        *data = 5;\n        delete data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        printIntLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102573_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new int;\n        *data = 5;\n        delete data;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printIntLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102577_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int * * dataPtr)\n{\n    int * data = *dataPtr;\n    printIntLine(*data);\n    }\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int * * dataPtr);\n\nvoid qazmlps()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    *data = 5;\n    delete data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102581_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = new long;\n        *data = 5L;\n        delete data;\n    }\n    if(5==5)\n    {\n        printLongLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102585_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new long;\n        *data = 5L;\n        delete data;\n    }\n    if(staticFive==5)\n    {\n        printLongLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102589_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new long;\n        *data = 5L;\n        delete data;\n    }\n    if(globalReturnsTrue())\n    {\n        printLongLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102593_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = new long;\n        *data = 5L;\n        delete data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printLongLine(*data);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102597_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(long * &data)\n{\n    data = new long;\n    *data = 5L;\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    long * data;\n    data = NULL;\n    ppoeidn(data);\n    printLongLine(*data);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102601_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = new twoIntsStruct;\n    data->intOne = 1;\n    data->intTwo = 2;\n    delete data;\n    printStructLine(data);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102605_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = new twoIntsStruct;\n        data->intOne = 1;\n        data->intTwo = 2;\n        delete data;\n    }\n    if(staticTrue)\n    {\n        printStructLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102609_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = new twoIntsStruct;\n        data->intOne = 1;\n        data->intTwo = 2;\n        delete data;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printStructLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102613_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = new twoIntsStruct;\n        data->intOne = 1;\n        data->intTwo = 2;\n        delete data;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        printStructLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102617_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    twoIntsStruct * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new twoIntsStruct;\n        data->intOne = 1;\n        data->intTwo = 2;\n        delete data;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printStructLine(data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102621_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * * dataPtr)\n{\n    twoIntsStruct * data = *dataPtr;\n    printStructLine(data);\n    }\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * * dataPtr);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = new twoIntsStruct;\n    data->intOne = 1;\n    data->intTwo = 2;\n    delete data;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102625_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = new wchar_t;\n        *data = L'A';\n        delete data;\n    }\n    if(5==5)\n    {\n        printWcharLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,676]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102629_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new wchar_t;\n        *data = L'A';\n        delete data;\n    }\n    if(staticFive==5)\n    {\n        printWcharLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102633_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new wchar_t;\n        *data = L'A';\n        delete data;\n    }\n    if(globalReturnsTrue())\n    {\n        printWcharLine(*data);\n        }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102637_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = new wchar_t;\n        *data = L'A';\n        delete data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printWcharLine(*data);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102641_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(wchar_t * &data)\n{\n    data = new wchar_t;\n    *data = L'A';\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    wchar_t * data;\n    data = NULL;\n    ppoeidn(data);\n    printWcharLine(*data);\n    }\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000102645_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1 \n{\n    public:\n        GenClass1() \n        {\n            name = NULL;\n        }\n    \n        GenClass1(const char * name)\n        {\n            if (name)\n            {\n                this->name = new char[strlen(name) + 1];\n                strcpy(this->name, name);\n            } \n            else \n            {\n                this->name = new char[1];\n                *(this->name) = '\\0';\n            }\n        }\n\n        ~GenClass1()\n        {\n            delete [] name;\n        }\n\n        GenClass1(GenClass1 &var1)\n        { \n            this->name = new char[strlen(var1.name)+1]; \n            strcpy(this->name, var1.name);\n        }\n        \n        GenClass1& operator=(const GenClass1& var1) \n        {\n            delete [] this->name;\n            this->name = new char[strlen(var1.name)+1]; \n            strcpy(this->name, var1.name); \n            return *this;\n        }\n        \n        char * name;\n};\n\nvoid uytvbdk()\n{\n    GenClass1 var1(\");\n    var1 = var1;\n    printLine(var1.name);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n\n\nnamespace GenNS1\n{\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[420,120,416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240266_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        free(data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        printLine(data);\n        }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240270_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    char * data;\n    data = NULL;\n    if(staticReturnsTrue())\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        free(data);\n    }\n    if(staticReturnsTrue())\n    {\n        printLine(data);\n        }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240274_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        free(data);\n    }\n    else\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        }\n    if(globalReturnsTrueOrFalse())\n    {\n        printLine(data);\n        }\n    else\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240278_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    while(1)\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        memset(data, 'A', 100-1);\n        data[100-1] = '\\0';\n        free(data);\n        break;\n    }\n    while(1)\n    {\n        printLine(data);\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240282_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * &data)\n{\n    data = (char *)malloc(100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    memset(data, 'A', 100-1);\n    data[100-1] = '\\0';\n    free(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * &data);\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    ppoeidn(data);\n    printLine(data);\n    }\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240286_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        free(data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        printLongLongLine(data[0]);\n        }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240290_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    int64_t * data;\n    data = NULL;\n    if(staticReturnsTrue())\n    {\n        data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        free(data);\n    }\n    if(staticReturnsTrue())\n    {\n        printLongLongLine(data[0]);\n        }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240294_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        free(data);\n    }\n    else\n    {\n        data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        }\n    if(globalReturnsTrueOrFalse())\n    {\n        printLongLongLine(data[0]);\n        }\n    else\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240298_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    while(1)\n    {\n        data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5LL;\n            }\n        }\n        free(data);\n        break;\n    }\n    while(1)\n    {\n        printLongLongLine(data[0]);\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240302_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * &data)\n{\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i] = 5LL;\n        }\n    }\n    free(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * &data);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    data = NULL;\n    ppoeidn(data);\n    printLongLongLine(data[0]);\n    }\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665,476]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240306_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        free(data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        printIntLine(data[0]);\n        }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240310_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    int * data;\n    data = NULL;\n    if(staticReturnsTrue())\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        free(data);\n    }\n    if(staticReturnsTrue())\n    {\n        printIntLine(data[0]);\n        }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240314_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        free(data);\n    }\n    else\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        }\n    if(globalReturnsTrueOrFalse())\n    {\n        printIntLine(data[0]);\n        }\n    else\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240318_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    while(1)\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5;\n            }\n        }\n        free(data);\n        break;\n    }\n    while(1)\n    {\n        printIntLine(data[0]);\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240322_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int * &data)\n{\n    data = (int *)malloc(100*sizeof(int));\n    if (data == NULL) {exit(-1);}\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i] = 5;\n        }\n    }\n    free(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int * &data);\n\nvoid qazmlps()\n{\n    int * data;\n    data = NULL;\n    ppoeidn(data);\n    printIntLine(data[0]);\n    }\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665,824]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240326_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = (long *)malloc(100*sizeof(long));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        free(data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        printLongLine(data[0]);\n        }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240330_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    long * data;\n    data = NULL;\n    if(staticReturnsTrue())\n    {\n        data = (long *)malloc(100*sizeof(long));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        free(data);\n    }\n    if(staticReturnsTrue())\n    {\n        printLongLine(data[0]);\n        }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240334_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = (long *)malloc(100*sizeof(long));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        free(data);\n    }\n    else\n    {\n        data = (long *)malloc(100*sizeof(long));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        }\n    if(globalReturnsTrueOrFalse())\n    {\n        printLongLine(data[0]);\n        }\n    else\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[484,690,824]}},{"data":{"cwe_ids":["CWE-416"],"filename":"000240338_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    while(1)\n    {\n        data = (long *)malloc(100*sizeof(long));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i] = 5L;\n            }\n        }\n        free(data);\n        break;\n    }\n    while(1)\n    {\n        printLongLine(data[0]);\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000001993_1.txt"},"language":"lang-cpp","code":"#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint *p = 0, k;\n\tcout << \"Hello World!\" << endl;\n\tk = *p;\n\treturn 0;\n}","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000001999_1.txt"},"language":"lang-cpp","code":"#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint *tab[1] = {(int *)0};\n\tcout << \"Hello World!\" << endl;\n\tint  c = *(tab[0]);\n\treturn 0;\n}","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104534_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    if(5==5)\n    {\n        {\n            twoIntsStruct *twoIntsStructPointer = NULL;\n            if ((twoIntsStructPointer != NULL) & (twoIntsStructPointer->intOne == 5))\n            {\n                printLine(\"intOne == 5\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104537_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            twoIntsStruct *twoIntsStructPointer = NULL;\n            if ((twoIntsStructPointer != NULL) & (twoIntsStructPointer->intOne == 5))\n            {\n                printLine(\"intOne == 5\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104540_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            twoIntsStruct *twoIntsStructPointer = NULL;\n            if ((twoIntsStructPointer != NULL) & (twoIntsStructPointer->intOne == 5))\n            {\n                printLine(\"intOne == 5\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104543_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            twoIntsStruct *twoIntsStructPointer = NULL;\n            if ((twoIntsStructPointer != NULL) & (twoIntsStructPointer->intOne == 5))\n            {\n                printLine(\"intOne == 5\");\n            }\n        }\n    }\n    else\n    {\n        {\n            twoIntsStruct *twoIntsStructPointer = NULL;\n            if ((twoIntsStructPointer != NULL) && (twoIntsStructPointer->intOne == 5))\n            {\n                printLine(\"intOne == 5\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104546_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        twoIntsStruct *twoIntsStructPointer = NULL;\n        if ((twoIntsStructPointer != NULL) & (twoIntsStructPointer->intOne == 5))\n        {\n            printLine(\"intOne == 5\");\n        }\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104549_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    goto var1;\nvar1:\n    {\n        twoIntsStruct *twoIntsStructPointer = NULL;\n        if ((twoIntsStructPointer != NULL) & (twoIntsStructPointer->intOne == 5))\n        {\n            printLine(\"intOne == 5\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104552_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    if(5==5)\n    {\n        data = NULL;\n    }\n    if(5==5)\n    {\n        printHexCharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104555_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = NULL;\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        printHexCharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104558_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = NULL;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printHexCharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104561_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = NULL;\n    }\n    else\n    {\n        data = \";\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        printHexCharLine(data[0]);\n    }\n    else\n    {\n        if (data != NULL)\n        {\n            printHexCharLine(data[0]);\n        }\n        else\n        {\n            printLine(\"data is NULL\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104564_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    switch(6)\n    {\n    case 6:\n        data = NULL;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printHexCharLine(data[0]);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104567_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    goto source;\nsource:\n    data = NULL;\n    goto var1;\nvar1:\n    printHexCharLine(data[0]);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104570_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    {\n        char * dataCopy = data;\n        char * data = dataCopy;\n        printHexCharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104573_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\ntypedef union\n{\n    char * unionFirst;\n    char * unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    var1 myUnion;\n    data = NULL;\n    myUnion.unionFirst = data;\n    {\n        char * data = myUnion.unionSecond;\n        printHexCharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104576_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic char * var1;\nstatic char * var2;\nstatic char * var3;\n\n\n\nstatic void ppoeidn()\n{\n    char * data = var1;\n    printHexCharLine(data[0]);\n}\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104579_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(char * data);\n\nvoid ppoeidn(char * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(char * data);\n\nvoid qazmlps(char * data)\n{\n    func7(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(char * data)\n{\n    printHexCharLine(data[0]);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(char * data);\n\nvoid ppoeidn0()\n{\n    char * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104582_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    char * * dataPtr = (char * *)dataVoidPtr;\n    char * data = (*dataPtr);\n    printHexCharLine(data[0]);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104585_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\ntypedef struct var1\n{\n    char * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    char * data = myStruct.structFirst;\n    printHexCharLine(data[0]);\n}\n\n\n\n#include <wchar.h>\n\ntypedef struct var1\n{\n    char * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid qazmlps()\n{\n    char * data;\n    var2 myStruct;\n    data = NULL;\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104588_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<char *> dataList)\n{\n    char * data = dataList.back();\n    printHexCharLine(data[0]);\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<char *> dataList);\n\nvoid qazmlps()\n{\n    char * data;\n    list<char *> dataList;\n    data = NULL;\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104591_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(char * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(char * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(char * data)\n{\n    printHexCharLine(data[0]);\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104620_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(TwoIntsClass * data);\n\nvoid ppoeidn(TwoIntsClass * data)\n{\n    qazmlps(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(TwoIntsClass * data)\n{\n    printIntLine(data->intOne);\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * data);\n\nvoid func7()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,625]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104623_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * * dataPtr)\n{\n    TwoIntsClass * data = *dataPtr;\n    printIntLine(data->intOne);\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * * dataPtr);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104626_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * dataArray[])\n{\n    TwoIntsClass * data = dataArray[2];\n    printIntLine(data->intOne);\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * dataArray[]);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    TwoIntsClass * dataArray[5];\n    data = NULL;\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104629_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<TwoIntsClass *> dataVector)\n{\n    TwoIntsClass * data = dataVector[2];\n    printIntLine(data->intOne);\n    delete data;\n}\n\n} #include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<TwoIntsClass *> dataVector);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    vector<TwoIntsClass *> dataVector;\n    data = NULL;\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,416]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104634_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    {\n        int *intPointer = NULL;\n        if (intPointer == NULL)\n        {\n            printIntLine(*intPointer);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104637_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            int *intPointer = NULL;\n            if (intPointer == NULL)\n            {\n                printIntLine(*intPointer);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104640_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    if(staticFive==5)\n    {\n        {\n            int *intPointer = NULL;\n            if (intPointer == NULL)\n            {\n                printIntLine(*intPointer);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104643_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    if(globalTrue)\n    {\n        {\n            int *intPointer = NULL;\n            if (intPointer == NULL)\n            {\n                printIntLine(*intPointer);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104646_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            int *intPointer = NULL;\n            if (intPointer == NULL)\n            {\n                printIntLine(*intPointer);\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104649_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    while(1)\n    {\n        {\n            int *intPointer = NULL;\n            if (intPointer == NULL)\n            {\n                printIntLine(*intPointer);\n            }\n        }\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104671_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nextern int var1;\n\nvoid ppoeidn(int64_t * data)\n{\n    if(var1)\n    {\n        printLongLongLine(*data);\n    }\n}\n\n\n\n#include <wchar.h>\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(int64_t * data);\n\nvoid uytvbdk()\n{\n    int64_t * data;\n    data = NULL;\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104681_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(int64_t * data);\n\nvoid ppoeidn(int64_t * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(int64_t * data);\n\nvoid qazmlps(int64_t * data)\n{\n    func7(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(int64_t * data)\n{\n    printLongLongLine(*data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int64_t * data);\n\nvoid ppoeidn0()\n{\n    int64_t * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104684_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    int64_t * * dataPtr = (int64_t * *)dataVoidPtr;\n    int64_t * data = (*dataPtr);\n    printLongLongLine(*data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    data = NULL;\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104687_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\ntypedef struct var1\n{\n    int64_t * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    int64_t * data = myStruct.structFirst;\n    printLongLongLine(*data);\n}\n\n\n\n#include <wchar.h>\n\ntypedef struct var1\n{\n    int64_t * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    var2 myStruct;\n    data = NULL;\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104690_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int64_t *> dataList)\n{\n    int64_t * data = dataList.back();\n    printLongLongLine(*data);\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int64_t *> dataList);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    list<int64_t *> dataList;\n    data = NULL;\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104721_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * data)\n{\n    printIntLine(*data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * data);\n\nvoid qazmlps()\n{\n    int * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104724_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(int * data);\n\nvoid ppoeidn(int * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(int * data);\n\nvoid qazmlps(int * data)\n{\n    func7(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn0(int * data);\n\nvoid func7(int * data)\n{\n    ppoeidn0(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn0(int * data)\n{\n    printIntLine(*data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * data);\n\nvoid ppoeidn3()\n{\n    int * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104727_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * data)\n{\n    printIntLine(*data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * data);\n\nvoid qazmlps()\n{\n    int * data;\n    void (*funcPtr) (int *) = ppoeidn;\n    data = NULL;\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104730_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nextern int * var1;\nextern int * var2;\nextern int * var3;\n\n\n\nvoid ppoeidn()\n{\n    int * data = var1;\n    printIntLine(*data);\n}\n\n\n\n#include <wchar.h>\n\nint * var1;\nint * var2;\nint * var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    int * data;\n    data = NULL;\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104733_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap)\n{\n    int * data = dataMap[2];\n    printIntLine(*data);\n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap);\n\nvoid qazmlps()\n{\n    int * data;\n    map<int, int *> dataMap;\n    data = NULL;\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104764_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(long * data);\n\nvoid ppoeidn(long * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(long * data)\n{\n    printLongLine(*data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(long * data);\n\nvoid func7()\n{\n    long * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104767_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(long * * dataPtr)\n{\n    long * data = *dataPtr;\n    printLongLine(*data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(long * * dataPtr);\n\nvoid qazmlps()\n{\n    long * data;\n    data = NULL;\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104770_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(long * dataArray[])\n{\n    long * data = dataArray[2];\n    printLongLine(*data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(long * dataArray[]);\n\nvoid qazmlps()\n{\n    long * data;\n    long * dataArray[5];\n    data = NULL;\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104773_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<long *> dataVector)\n{\n    long * data = dataVector[2];\n    printLongLine(*data);\n}\n\n} #include <vector>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<long *> dataVector);\n\nvoid qazmlps()\n{\n    long * data;\n    vector<long *> dataVector;\n    data = NULL;\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104778_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    {\n        int *intPointer = NULL;\n        intPointer = (int *)malloc(sizeof(int));\n        *intPointer = 5;\n        printIntLine(*intPointer);\n        if (intPointer != NULL)\n        {\n            *intPointer = 10;\n        }\n        printIntLine(*intPointer);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104781_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            int *intPointer = NULL;\n            intPointer = (int *)malloc(sizeof(int));\n            *intPointer = 5;\n            printIntLine(*intPointer);\n            if (intPointer != NULL)\n            {\n                *intPointer = 10;\n            }\n            printIntLine(*intPointer);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,672]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104784_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    if(staticFive==5)\n    {\n        {\n            int *intPointer = NULL;\n            intPointer = (int *)malloc(sizeof(int));\n            *intPointer = 5;\n            printIntLine(*intPointer);\n            if (intPointer != NULL)\n            {\n                *intPointer = 10;\n            }\n            printIntLine(*intPointer);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104787_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    if(globalTrue)\n    {\n        {\n            int *intPointer = NULL;\n            intPointer = (int *)malloc(sizeof(int));\n            *intPointer = 5;\n            printIntLine(*intPointer);\n            if (intPointer != NULL)\n            {\n                *intPointer = 10;\n            }\n            printIntLine(*intPointer);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,672]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104790_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            int *intPointer = NULL;\n            intPointer = (int *)malloc(sizeof(int));\n            *intPointer = 5;\n            printIntLine(*intPointer);\n            if (intPointer != NULL)\n            {\n                *intPointer = 10;\n            }\n            printIntLine(*intPointer);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104793_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    while(1)\n    {\n        {\n            int *intPointer = NULL;\n            intPointer = (int *)malloc(sizeof(int));\n            *intPointer = 5;\n            printIntLine(*intPointer);\n            if (intPointer != NULL)\n            {\n                *intPointer = 10;\n            }\n            printIntLine(*intPointer);\n        }\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,672]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104815_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nextern int var1;\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    if(var1)\n    {\n        printIntLine(data->intOne);\n    }\n}\n\n\n\n#include <wchar.h>\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid uytvbdk()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104825_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(twoIntsStruct * data);\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(twoIntsStruct * data);\n\nvoid qazmlps(twoIntsStruct * data)\n{\n    func7(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(twoIntsStruct * data)\n{\n    printIntLine(data->intOne);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid ppoeidn0()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104828_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;\n    twoIntsStruct * data = (*dataPtr);\n    printIntLine(data->intOne);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104831_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\ntypedef struct var1\n{\n    twoIntsStruct * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    twoIntsStruct * data = myStruct.structFirst;\n    printIntLine(data->intOne);\n}\n\n\n\n#include <wchar.h>\n\ntypedef struct var1\n{\n    twoIntsStruct * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    var2 myStruct;\n    data = NULL;\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104834_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<twoIntsStruct *> dataList)\n{\n    twoIntsStruct * data = dataList.back();\n    printIntLine(data->intOne);\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<twoIntsStruct *> dataList);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    list<twoIntsStruct *> dataList;\n    data = NULL;\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104839_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    if(1)\n    {\n        data = NULL;\n    }\n    if(1)\n    {\n        printWcharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104842_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    if(staticTrue)\n    {\n        data = NULL;\n    }\n    if(staticTrue)\n    {\n        printWcharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104845_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    wchar_t * data;\n    if(staticReturnsTrue())\n    {\n        data = NULL;\n    }\n    if(staticReturnsTrue())\n    {\n        printWcharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104848_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    if(globalReturnsTrue())\n    {\n        data = NULL;\n    }\n    if(globalReturnsTrue())\n    {\n        printWcharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104851_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    if(globalFive==5)\n    {\n        data = NULL;\n    }\n    if(globalFive==5)\n    {\n        printWcharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104854_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    wchar_t * data;\n    for(i = 0; i < 1; i++)\n    {\n        data = NULL;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printWcharLine(data[0]);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104857_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nextern int var1;\n\nvoid ppoeidn(wchar_t * data)\n{\n    if(var1)\n    {\n        printWcharLine(data[0]);\n    }\n}\n\n\n\n#include <wchar.h>\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(wchar_t * data);\n\nvoid uytvbdk()\n{\n    wchar_t * data;\n    data = NULL;\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104860_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    wchar_t * &dataRef = data;\n    data = NULL;\n    {\n        wchar_t * data = dataRef;\n        printWcharLine(data[0]);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104863_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nstatic void ppoeidn(wchar_t * data)\n{\n    printWcharLine(data[0]);\n}\n\nvoid qhwystdd()\n{\n    wchar_t * data;\n    void (*funcPtr) (wchar_t *) = ppoeidn;\n    data = NULL;\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104866_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(wchar_t * data);\n\nvoid ppoeidn(wchar_t * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(wchar_t * data)\n{\n    printWcharLine(data[0]);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(wchar_t * data);\n\nvoid func7()\n{\n    wchar_t * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104869_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(wchar_t * * dataPtr)\n{\n    wchar_t * data = *dataPtr;\n    printWcharLine(data[0]);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(wchar_t * * dataPtr);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104872_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(wchar_t * dataArray[])\n{\n    wchar_t * data = dataArray[2];\n    printWcharLine(data[0]);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(wchar_t * dataArray[]);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    wchar_t * dataArray[5];\n    data = NULL;\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104875_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<wchar_t *> dataVector)\n{\n    wchar_t * data = dataVector[2];\n    printWcharLine(data[0]);\n}\n\n} #include <vector>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<wchar_t *> dataVector);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    vector<wchar_t *> dataVector;\n    data = NULL;\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000104878_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(wchar_t * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(wchar_t * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(wchar_t * data) const\n{\n    printWcharLine(data[0]);\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240692_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    if(1)\n    {\n        data = NULL;\n    }\n    if(1)\n    {\n        printIntLine(data->intOne);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240695_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    if(staticTrue)\n    {\n        data = NULL;\n    }\n    if(staticTrue)\n    {\n        printIntLine(data->intOne);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240698_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\nnamespace var1\n{\n\n\n\nvoid xnzxbnd()\n{\n    TwoIntsClass * data;\n    if(staticReturnsTrue())\n    {\n        data = NULL;\n    }\n    if(staticReturnsTrue())\n    {\n        printIntLine(data->intOne);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240701_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    if(globalReturnsTrue())\n    {\n        data = NULL;\n    }\n    if(globalReturnsTrue())\n    {\n        printIntLine(data->intOne);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240704_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    if(globalFive==5)\n    {\n        data = NULL;\n    }\n    if(globalFive==5)\n    {\n        printIntLine(data->intOne);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240707_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    TwoIntsClass * data;\n    for(i = 0; i < 1; i++)\n    {\n        data = NULL;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        printIntLine(data->intOne);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240710_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    {\n        TwoIntsClass * dataCopy = data;\n        TwoIntsClass * data = dataCopy;\n        printIntLine(data->intOne);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240713_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\ntypedef union\n{\n    TwoIntsClass * unionFirst;\n    TwoIntsClass * unionSecond;\n} unionType;\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    unionType myUnion;\n    data = NULL;\n    myUnion.unionFirst = data;\n    {\n        TwoIntsClass * data = myUnion.unionSecond;\n        printIntLine(data->intOne);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240716_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\nstatic TwoIntsClass * var2;\nstatic TwoIntsClass * var3;\nstatic TwoIntsClass * var4;\n\n\n\nstatic void ppoeidn()\n{\n    TwoIntsClass * data = var2;\n    printIntLine(data->intOne);\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    var2 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240719_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    printLongLongLine(*data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240722_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    if(STATIC_CONST_TRUE)\n    {\n        data = NULL;\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        printLongLongLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240725_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    if(staticFive==5)\n    {\n        data = NULL;\n    }\n    if(staticFive==5)\n    {\n        printLongLongLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240728_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    if(globalTrue)\n    {\n        data = NULL;\n    }\n    if(globalTrue)\n    {\n        printLongLongLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240731_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = NULL;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        printLongLongLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240734_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    while(1)\n    {\n        data = NULL;\n        break;\n    }\n    while(1)\n    {\n        printLongLongLine(*data);\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240737_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nstatic int var1 = 0;\n\nstatic void ppoeidn(int64_t * data)\n{\n    if(var1)\n    {\n        printLongLongLine(*data);\n    }\n}\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    data = NULL;\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240740_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    int64_t * &dataRef = data;\n    data = NULL;\n    {\n        int64_t * data = dataRef;\n        printLongLongLine(*data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240743_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nstatic void ppoeidn(int64_t * data)\n{\n    printLongLongLine(*data);\n}\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    void (*funcPtr) (int64_t *) = ppoeidn;\n    data = NULL;\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,676]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240746_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int64_t * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int64_t * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int64_t * data)\n{\n    printLongLongLine(*data);\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    data = NULL;\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240749_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    if(5==5)\n    {\n        data = NULL;\n    }\n    if(5==5)\n    {\n        printIntLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240752_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = NULL;\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        printIntLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240755_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = NULL;\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        printIntLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240758_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    int tmpData = 5;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = NULL;\n    }\n    else\n    {\n        {\n            data = &tmpData;\n        }\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        printIntLine(*data);\n    }\n    else\n    {\n        if (data != NULL)\n        {\n            printIntLine(*data);\n        }\n        else\n        {\n            printLine(\"data is NULL\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240761_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    switch(6)\n    {\n    case 6:\n        data = NULL;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        printIntLine(*data);\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240764_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    goto source;\nsource:\n    data = NULL;\n    goto var1;\nvar1:\n    printIntLine(*data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240767_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    int * *dataPtr1 = &data;\n    int * *dataPtr2 = &data;\n    {\n        int * data = *dataPtr1;\n        data = NULL;\n        *dataPtr1 = data;\n    }\n    {\n        int * data = *dataPtr2;\n        printIntLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240770_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nstatic void ppoeidn(int * data)\n{\n    printIntLine(*data);\n}\n\nvoid qhwystdd()\n{\n    int * data;\n    data = NULL;\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240773_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int * data) const\n{\n    printIntLine(*data);\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-476"],"filename":"000240776_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    if(1)\n    {\n        data = NULL;\n    }\n    if(1)\n    {\n        printLongLine(*data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106136_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL; \n    {\n        char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n        memset(dataBuffer, 'A', 100-1); \n        dataBuffer[100-1] = '\\0'; \n        data = dataBuffer;\n    }\n    printLine(data);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106162_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(char * data);\n\nvoid ppoeidn(char * data)\n{\n    xnzxbnd(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(char * data)\n{\n    printLine(data);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * data);\n\nvoid uytvbdk()\n{\n    char * data;\n    data = NULL; \n    {\n        char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n        memset(dataBuffer, 'A', 100-1); \n        dataBuffer[100-1] = '\\0'; \n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,78,122]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106188_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL; \n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            char dataBuffer[100];\n            memset(dataBuffer, 'A', 100-1); \n            dataBuffer[100-1] = '\\0'; \n            data = dataBuffer;\n        }\n    }\n    printLine(data);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106214_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(char * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(char * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(char * data) const\n{\n    printLine(data);\n    delete [] data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL; \n    {\n        char dataBuffer[100];\n        memset(dataBuffer, 'A', 100-1); \n        dataBuffer[100-1] = '\\0'; \n        data = dataBuffer;\n    }\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772,690]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106240_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\nstatic char * var2;\nstatic char * var3;\n\n\n\nstatic void ppoeidn()\n{\n    char * data = var2;\n    printLine(data);\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL; \n    {\n        static char dataBuffer[100];\n        memset(dataBuffer, 'A', 100-1); \n        dataBuffer[100-1] = '\\0'; \n        data = dataBuffer;\n    }\n    var2 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106266_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    if(globalReturnsTrue())\n    {\n        {\n            TwoIntsClass * dataBuffer = (TwoIntsClass *)ALLOCA(100*sizeof(TwoIntsClass));\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i].intOne = 1;\n                    dataBuffer[i].intTwo = 1;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printIntLine(data[0].intOne);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106292_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<TwoIntsClass *> dataList)\n{\n    TwoIntsClass * data = dataList.back();\n    printIntLine(data[0].intOne);\n    delete [] data;\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<TwoIntsClass *> dataList);\n\nvoid xnzxbnd()\n{\n    TwoIntsClass * data;\n    list<TwoIntsClass *> dataList;\n    data = NULL; \n    {\n        TwoIntsClass * dataBuffer = (TwoIntsClass *)ALLOCA(100*sizeof(TwoIntsClass));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i].intOne = 1;\n                dataBuffer[i].intTwo = 1;\n            }\n        }\n        data = dataBuffer;\n    }\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,789,401]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106318_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * data)\n{\n    printIntLine(data[0].intOne);\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    {\n        TwoIntsClass dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i].intOne = 1;\n                dataBuffer[i].intTwo = 1;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106344_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            static TwoIntsClass dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i].intOne = 1;\n                    dataBuffer[i].intTwo = 1;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printIntLine(data[0].intOne);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106370_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nextern TwoIntsClass * var1;\nextern TwoIntsClass * var2;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data = var1;\n    printIntLine(data[0].intOne);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nTwoIntsClass * var1;\nTwoIntsClass * var2;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    {\n        static TwoIntsClass dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i].intOne = 1;\n                dataBuffer[i].intTwo = 1;\n            }\n        }\n        data = dataBuffer;\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106396_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    int64_t * &dataRef = data;\n    data = NULL; \n    {\n        int64_t * dataBuffer = (int64_t *)ALLOCA(100*sizeof(int64_t));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5LL;\n            }\n        }\n        data = dataBuffer;\n    }\n    {\n        int64_t * data = dataRef;\n        printLongLongLine(data[0]);\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106422_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL; \n    if(staticFive==5)\n    {\n        {\n            int64_t dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5LL;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printLongLongLine(data[0]);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,401]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106448_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * dataArray[])\n{\n    int64_t * data = dataArray[2];\n    printLongLongLine(data[0]);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * dataArray[]);\n\nvoid xnzxbnd()\n{\n    int64_t * data;\n    int64_t * dataArray[5];\n    data = NULL; \n    {\n        int64_t dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5LL;\n            }\n        }\n        data = dataBuffer;\n    }\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106474_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL; \n    {\n        static int64_t dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5LL;\n            }\n        }\n        data = dataBuffer;\n    }\n    {\n        int64_t * dataCopy = data;\n        int64_t * data = dataCopy;\n        printLongLongLine(data[0]);\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106500_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL; \n    if(staticTrue)\n    {\n        {\n            int * dataBuffer = (int *)ALLOCA(100*sizeof(int));\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printIntLine(data[0]);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106526_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    int * * dataPtr = (int * *)dataVoidPtr;\n    int * data = (*dataPtr);\n    printIntLine(data[0]);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    int * data;\n    data = NULL; \n    {\n        int * dataBuffer = (int *)ALLOCA(100*sizeof(int));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,754]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106552_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i;\n    int * data;\n    data = NULL; \n    for(i = 0; i < 1; i++)\n    {\n        {\n            int dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printIntLine(data[0]);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106578_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL; \n    if(5==5)\n    {\n        {\n            static int dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printIntLine(data[0]);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106604_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(int * data);\n\nvoid ppoeidn(int * data)\n{\n    xnzxbnd(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid uytvbdk(int * data);\n\nvoid xnzxbnd(int * data)\n{\n    uytvbdk(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(int * data);\n\nvoid uytvbdk(int * data)\n{\n    func7(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(int * data)\n{\n    printIntLine(data[0]);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int * data);\n\nvoid func9()\n{\n    int * data;\n    data = NULL; \n    {\n        static int dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106630_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    switch(6)\n    {\n    case 6:\n    {\n        long * dataBuffer = (long *)ALLOCA(100*sizeof(long));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5L;\n            }\n        }\n        data = dataBuffer;\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    printLongLine(data[0]);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106656_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    {\n        long dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5L;\n            }\n        }\n        data = dataBuffer;\n    }\n    printLongLine(data[0]);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106682_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(long * data);\n\nvoid ppoeidn(long * data)\n{\n    xnzxbnd(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(long * data)\n{\n    printLongLine(data[0]);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(long * data);\n\nvoid uytvbdk()\n{\n    long * data;\n    data = NULL; \n    {\n        long dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5L;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106708_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            static long dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5L;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printLongLine(data[0]);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106734_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(long * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(long * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(long * data) const\n{\n    printLongLine(data[0]);\n    delete [] data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    {\n        static long dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5L;\n            }\n        }\n        data = dataBuffer;\n    }\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106760_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\nstatic twoIntsStruct * var2;\nstatic twoIntsStruct * var3;\n\n\n\nstatic void ppoeidn()\n{\n    twoIntsStruct * data = var2;\n    printStructLine(&data[0]);\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    {\n        twoIntsStruct * dataBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i].intOne = 1;\n                dataBuffer[i].intTwo = 1;\n            }\n        }\n        data = dataBuffer;\n    }\n    var2 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,788]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106786_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    if(globalReturnsTrue())\n    {\n        {\n            twoIntsStruct dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i].intOne = 1;\n                    dataBuffer[i].intTwo = 1;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printStructLine(&data[0]);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106812_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<twoIntsStruct *> dataList)\n{\n    twoIntsStruct * data = dataList.back();\n    printStructLine(&data[0]);\n    delete [] data;\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<twoIntsStruct *> dataList);\n\nvoid xnzxbnd()\n{\n    twoIntsStruct * data;\n    list<twoIntsStruct *> dataList;\n    data = NULL; \n    {\n        twoIntsStruct dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i].intOne = 1;\n                dataBuffer[i].intTwo = 1;\n            }\n        }\n        data = dataBuffer;\n    }\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672,761]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106838_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    printStructLine(&data[0]);\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    {\n        static twoIntsStruct dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i].intOne = 1;\n                dataBuffer[i].intTwo = 1;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106864_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL; \n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            wchar_t * dataBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));\n            wmemset(dataBuffer, L'A', 100-1); \n            dataBuffer[100-1] = L'\\0'; \n            data = dataBuffer;\n        }\n    }\n    printWLine(data);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106890_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nextern wchar_t * var1;\nextern wchar_t * var2;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data = var1;\n    printWLine(data);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nwchar_t * var1;\nwchar_t * var2;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    wchar_t * data;\n    data = NULL; \n    {\n        wchar_t * dataBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));\n        wmemset(dataBuffer, L'A', 100-1); \n        dataBuffer[100-1] = L'\\0'; \n        data = dataBuffer;\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106916_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    wchar_t * &dataRef = data;\n    data = NULL; \n    {\n        wchar_t dataBuffer[100];\n        wmemset(dataBuffer, L'A', 100-1); \n        dataBuffer[100-1] = L'\\0'; \n        data = dataBuffer;\n    }\n    {\n        wchar_t * data = dataRef;\n        printWLine(data);\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106942_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL; \n    if(staticFive==5)\n    {\n        {\n            static wchar_t dataBuffer[100];\n            wmemset(dataBuffer, L'A', 100-1); \n            dataBuffer[100-1] = L'\\0'; \n            data = dataBuffer;\n        }\n    }\n    printWLine(data);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106968_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * dataArray[])\n{\n    wchar_t * data = dataArray[2];\n    printWLine(data);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * dataArray[]);\n\nvoid xnzxbnd()\n{\n    wchar_t * data;\n    wchar_t * dataArray[5];\n    data = NULL; \n    {\n        static wchar_t dataBuffer[100];\n        wmemset(dataBuffer, L'A', 100-1); \n        dataBuffer[100-1] = L'\\0'; \n        data = dataBuffer;\n    }\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000106994_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL; \n    {\n        char * dataBuffer = (char *)ALLOCA(sizeof(char));\n        *dataBuffer = 'A';\n        data = dataBuffer;\n    }\n    {\n        char * dataCopy = data;\n        char * data = dataCopy;\n        printHexCharLine(*data);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762,400]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107020_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL; \n    if(staticTrue)\n    {\n        {\n            char dataBuffer;\n            dataBuffer = 'A';\n            data = &dataBuffer;\n        }\n    }\n    printHexCharLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762,476]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107046_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    char * * dataPtr = (char * *)dataVoidPtr;\n    char * data = (*dataPtr);\n    printHexCharLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    char * data;\n    data = NULL; \n    {\n        char dataBuffer;\n        dataBuffer = 'A';\n        data = &dataBuffer;\n    }\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107072_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i;\n    char * data;\n    data = NULL; \n    for(i = 0; i < 1; i++)\n    {\n        {\n            char buffer[sizeof(char)];\n            char * dataBuffer = new(buffer) char;\n            *dataBuffer = 'A';\n            data = dataBuffer;\n        }\n    }\n    printHexCharLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107098_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL; \n    if(5==5)\n    {\n        {\n            static char dataBuffer;\n            dataBuffer = 'A';\n            data = &dataBuffer;\n        }\n    }\n    printHexCharLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107124_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(char * data);\n\nvoid ppoeidn(char * data)\n{\n    xnzxbnd(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid uytvbdk(char * data);\n\nvoid xnzxbnd(char * data)\n{\n    uytvbdk(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data);\n\nvoid uytvbdk(char * data)\n{\n    func7(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data)\n{\n    printHexCharLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * data);\n\nvoid func9()\n{\n    char * data;\n    data = NULL; \n    {\n        static char dataBuffer;\n        dataBuffer = 'A';\n        data = &dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107150_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    switch(6)\n    {\n    case 6:\n    {\n        TwoIntsClass * dataBuffer = (TwoIntsClass *)ALLOCA(sizeof(TwoIntsClass));\n        dataBuffer->intOne = 2;\n        dataBuffer->intTwo = 2;\n        data = dataBuffer;\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    printIntLine(data->intOne);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107176_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    {\n        TwoIntsClass dataBuffer;\n        dataBuffer.intOne = 1;\n        dataBuffer.intTwo = 1;\n        data = &dataBuffer;\n    }\n    printIntLine(data->intOne);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107202_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(TwoIntsClass * data);\n\nvoid ppoeidn(TwoIntsClass * data)\n{\n    xnzxbnd(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(TwoIntsClass * data)\n{\n    printIntLine(data->intOne);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * data);\n\nvoid uytvbdk()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    {\n        TwoIntsClass dataBuffer;\n        dataBuffer.intOne = 1;\n        dataBuffer.intTwo = 1;\n        data = &dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107228_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            char buffer[sizeof(TwoIntsClass)];\n            TwoIntsClass * dataBuffer = new(buffer) TwoIntsClass;\n            dataBuffer->intOne = 2;\n            dataBuffer->intTwo = 2;\n            data = dataBuffer;\n        }\n    }\n    printIntLine(data->intOne);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107254_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(TwoIntsClass * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(TwoIntsClass * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(TwoIntsClass * data) const\n{\n    printIntLine(data->intOne);\n    delete data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    {\n        char buffer[sizeof(TwoIntsClass)];\n        TwoIntsClass * dataBuffer = new(buffer) TwoIntsClass;\n        dataBuffer->intOne = 2;\n        dataBuffer->intTwo = 2;\n        data = dataBuffer;\n    }\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107280_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\nstatic TwoIntsClass * var2;\nstatic TwoIntsClass * var3;\n\n\n\nstatic void ppoeidn()\n{\n    TwoIntsClass * data = var2;\n    printIntLine(data->intOne);\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    {\n        static TwoIntsClass dataBuffer;\n        dataBuffer.intOne = 1;\n        dataBuffer.intTwo = 1;\n        data = &dataBuffer;\n    }\n    var2 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107306_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL; \n    if(globalReturnsTrue())\n    {\n        {\n            int64_t * dataBuffer = (int64_t *)ALLOCA(sizeof(int64_t));\n            *dataBuffer = 5LL;\n            data = dataBuffer;\n        }\n    }\n    printLongLongLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690,754]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107332_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int64_t *> dataList)\n{\n    int64_t * data = dataList.back();\n    printLongLongLine(*data);\n    delete data;\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int64_t *> dataList);\n\nvoid xnzxbnd()\n{\n    int64_t * data;\n    list<int64_t *> dataList;\n    data = NULL; \n    {\n        int64_t * dataBuffer = (int64_t *)ALLOCA(sizeof(int64_t));\n        *dataBuffer = 5LL;\n        data = dataBuffer;\n    }\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,401,762]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107358_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(int64_t * data)\n{\n    printLongLongLine(*data);\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    data = NULL; \n    {\n        int64_t dataBuffer;\n        dataBuffer = 5LL;\n        data = &dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107384_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL; \n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            char buffer[sizeof(int64_t)];\n            int64_t * dataBuffer = new(buffer) int64_t;\n            *dataBuffer = 5LL;\n            data = dataBuffer;\n        }\n    }\n    printLongLongLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107410_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nextern int64_t * var1;\nextern int64_t * var2;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data = var1;\n    printLongLongLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nint64_t * var1;\nint64_t * var2;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    int64_t * data;\n    data = NULL; \n    {\n        char buffer[sizeof(int64_t)];\n        int64_t * dataBuffer = new(buffer) int64_t;\n        *dataBuffer = 5LL;\n        data = dataBuffer;\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107436_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    int64_t * &dataRef = data;\n    data = NULL; \n    {\n        static int64_t dataBuffer;\n        dataBuffer = 5LL;\n        data = &dataBuffer;\n    }\n    {\n        int64_t * data = dataRef;\n        printLongLongLine(*data);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107462_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL; \n    if(staticFive==5)\n    {\n        {\n            int * dataBuffer = (int *)ALLOCA(sizeof(int));\n            *dataBuffer = 5;\n            data = dataBuffer;\n        }\n    }\n    printIntLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762,400]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107488_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int * dataArray[])\n{\n    int * data = dataArray[2];\n    printIntLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int * dataArray[]);\n\nvoid xnzxbnd()\n{\n    int * data;\n    int * dataArray[5];\n    data = NULL; \n    {\n        int * dataBuffer = (int *)ALLOCA(sizeof(int));\n        *dataBuffer = 5;\n        data = dataBuffer;\n    }\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,754]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107514_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL; \n    {\n        int dataBuffer;\n        dataBuffer = 5;\n        data = &dataBuffer;\n    }\n    {\n        int * dataCopy = data;\n        int * data = dataCopy;\n        printIntLine(*data);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107540_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL; \n    if(staticTrue)\n    {\n        {\n            char buffer[sizeof(int)];\n            int * dataBuffer = new(buffer) int;\n            *dataBuffer = 5;\n            data = dataBuffer;\n        }\n    }\n    printIntLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107566_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    int * * dataPtr = (int * *)dataVoidPtr;\n    int * data = (*dataPtr);\n    printIntLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    int * data;\n    data = NULL; \n    {\n        char buffer[sizeof(int)];\n        int * dataBuffer = new(buffer) int;\n        *dataBuffer = 5;\n        data = dataBuffer;\n    }\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107592_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i;\n    int * data;\n    data = NULL; \n    for(i = 0; i < 1; i++)\n    {\n        {\n            static int dataBuffer;\n            dataBuffer = 5;\n            data = &dataBuffer;\n        }\n    }\n    printIntLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107618_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    if(5==5)\n    {\n        {\n            long * dataBuffer = (long *)ALLOCA(sizeof(long));\n            *dataBuffer = 5L;\n            data = dataBuffer;\n        }\n    }\n    printLongLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107644_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(long * data);\n\nvoid ppoeidn(long * data)\n{\n    xnzxbnd(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid uytvbdk(long * data);\n\nvoid xnzxbnd(long * data)\n{\n    uytvbdk(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(long * data);\n\nvoid uytvbdk(long * data)\n{\n    func7(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(long * data)\n{\n    printLongLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(long * data);\n\nvoid func9()\n{\n    long * data;\n    data = NULL; \n    {\n        long * dataBuffer = (long *)ALLOCA(sizeof(long));\n        *dataBuffer = 5L;\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,787]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107670_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    switch(6)\n    {\n    case 6:\n    {\n        long dataBuffer;\n        dataBuffer = 5L;\n        data = &dataBuffer;\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    printLongLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107696_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    {\n        char buffer[sizeof(long)];\n        long * dataBuffer = new(buffer) long;\n        *dataBuffer = 5L;\n        data = dataBuffer;\n    }\n    printLongLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107722_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(long * data);\n\nvoid ppoeidn(long * data)\n{\n    xnzxbnd(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd(long * data)\n{\n    printLongLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(long * data);\n\nvoid uytvbdk()\n{\n    long * data;\n    data = NULL; \n    {\n        char buffer[sizeof(long)];\n        long * dataBuffer = new(buffer) long;\n        *dataBuffer = 5L;\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107748_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            static long dataBuffer;\n            dataBuffer = 5L;\n            data = &dataBuffer;\n        }\n    }\n    printLongLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,690]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107774_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(long * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(long * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(long * data) const\n{\n    printLongLine(*data);\n    delete data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    {\n        static long dataBuffer;\n        dataBuffer = 5L;\n        data = &dataBuffer;\n    }\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107800_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\nstatic twoIntsStruct * var2;\nstatic twoIntsStruct * var3;\n\n\n\nstatic void ppoeidn()\n{\n    twoIntsStruct * data = var2;\n    printStructLine(data);\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    {\n        twoIntsStruct * dataBuffer = (twoIntsStruct *)ALLOCA(sizeof(twoIntsStruct));\n        dataBuffer->intOne = 1;\n        dataBuffer->intTwo = 1;\n        data = dataBuffer;\n    }\n    var2 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107826_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    if(globalReturnsTrue())\n    {\n        {\n            twoIntsStruct dataBuffer;\n            dataBuffer.intOne = 1;\n            dataBuffer.intTwo = 1;\n            data = &dataBuffer;\n        }\n    }\n    printStructLine(data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107852_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<twoIntsStruct *> dataList)\n{\n    twoIntsStruct * data = dataList.back();\n    printStructLine(data);\n    delete data;\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<twoIntsStruct *> dataList);\n\nvoid xnzxbnd()\n{\n    twoIntsStruct * data;\n    list<twoIntsStruct *> dataList;\n    data = NULL; \n    {\n        twoIntsStruct dataBuffer;\n        dataBuffer.intOne = 1;\n        dataBuffer.intTwo = 1;\n        data = &dataBuffer;\n    }\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107878_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    printStructLine(data);\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    {\n        char buffer[sizeof(twoIntsStruct)];\n        twoIntsStruct * dataBuffer = new(buffer) twoIntsStruct;\n        dataBuffer->intOne = 1;\n        dataBuffer->intTwo = 1;\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107904_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            static twoIntsStruct dataBuffer;\n            dataBuffer.intOne = 1;\n            dataBuffer.intTwo = 1;\n            data = &dataBuffer;\n        }\n    }\n    printStructLine(data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107930_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nextern twoIntsStruct * var1;\nextern twoIntsStruct * var2;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data = var1;\n    printStructLine(data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\ntwoIntsStruct * var1;\ntwoIntsStruct * var2;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    {\n        static twoIntsStruct dataBuffer;\n        dataBuffer.intOne = 1;\n        dataBuffer.intTwo = 1;\n        data = &dataBuffer;\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107956_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    wchar_t * &dataRef = data;\n    data = NULL; \n    {\n        wchar_t * dataBuffer = (wchar_t *)ALLOCA(sizeof(wchar_t));\n        *dataBuffer = L'A';\n        data = dataBuffer;\n    }\n    {\n        wchar_t * data = dataRef;\n        printWcharLine(*data);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000107982_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL; \n    if(staticFive==5)\n    {\n        {\n            wchar_t dataBuffer;\n            dataBuffer = L'A';\n            data = &dataBuffer;\n        }\n    }\n    printWcharLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772,476]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108008_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * dataArray[])\n{\n    wchar_t * data = dataArray[2];\n    printWcharLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * dataArray[]);\n\nvoid xnzxbnd()\n{\n    wchar_t * data;\n    wchar_t * dataArray[5];\n    data = NULL; \n    {\n        wchar_t dataBuffer;\n        dataBuffer = L'A';\n        data = &dataBuffer;\n    }\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772,690]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108034_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL; \n    {\n        char buffer[sizeof(wchar_t)];\n        wchar_t * dataBuffer = new(buffer) wchar_t;\n        *dataBuffer = L'A';\n        data = dataBuffer;\n    }\n    {\n        wchar_t * dataCopy = data;\n        wchar_t * data = dataCopy;\n        printWcharLine(*data);\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108060_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL; \n    if(staticTrue)\n    {\n        {\n            static wchar_t dataBuffer;\n            dataBuffer = L'A';\n            data = &dataBuffer;\n        }\n    }\n    printWcharLine(*data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,672,416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108086_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;\n    wchar_t * data = (*dataPtr);\n    printWcharLine(*data);\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    wchar_t * data;\n    data = NULL; \n    {\n        static wchar_t dataBuffer;\n        dataBuffer = L'A';\n        data = &dataBuffer;\n    }\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[762,416,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108112_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i;\n    char * data;\n    data = NULL; \n    for(i = 0; i < 1; i++)\n    {\n        {\n            char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n            memset(dataBuffer, 'A', 100-1); \n            dataBuffer[100-1] = '\\0'; \n            data = dataBuffer;\n        }\n    }\n    printLine(data);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[672,416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108138_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL; \n    if(5==5)\n    {\n        {\n            char dataBuffer[100];\n            memset(dataBuffer, 'A', 100-1); \n            dataBuffer[100-1] = '\\0'; \n            data = dataBuffer;\n        }\n    }\n    printLine(data);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108164_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid xnzxbnd(char * data);\n\nvoid ppoeidn(char * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid uytvbdk(char * data);\n\nvoid xnzxbnd(char * data)\n{\n    uytvbdk(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(char * data);\n\nvoid uytvbdk(char * data)\n{\n    func7(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(char * data)\n{\n    printLine(data);\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(char * data);\n\nvoid func9()\n{\n    char * data;\n    data = NULL; \n    {\n        char dataBuffer[100];\n        memset(dataBuffer, 'A', 100-1); \n        dataBuffer[100-1] = '\\0'; \n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108190_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL; \n    switch(6)\n    {\n    case 6:\n    {\n        static char dataBuffer[100];\n        memset(dataBuffer, 'A', 100-1); \n        dataBuffer[100-1] = '\\0'; \n        data = dataBuffer;\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    printLine(data);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108216_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL; \n    {\n        int64_t * dataBuffer = (int64_t *)ALLOCA(100*sizeof(int64_t));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5LL;\n            }\n        }\n        data = dataBuffer;\n    }\n    printLongLongLine(data[0]);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108242_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid xnzxbnd(int64_t * data);\n\nvoid ppoeidn(int64_t * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid xnzxbnd(int64_t * data)\n{\n    printLongLongLine(data[0]);\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int64_t * data);\n\nvoid uytvbdk()\n{\n    int64_t * data;\n    data = NULL; \n    {\n        int64_t * dataBuffer = (int64_t *)ALLOCA(100*sizeof(int64_t));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5LL;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108268_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL; \n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            int64_t dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5LL;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printLongLongLine(data[0]);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,664]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108294_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int64_t * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int64_t * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int64_t * data) const\n{\n    printLongLongLine(data[0]);\n    free(data);\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL; \n    {\n        int64_t dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5LL;\n            }\n        }\n        data = dataBuffer;\n    }\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108320_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int64_t * var1;\nstatic int64_t * var2;\n\n\n\nstatic void ppoeidn()\n{\n    int64_t * data = var1;\n    printLongLongLine(data[0]);\n    free(data);\n}\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    data = NULL; \n    {\n        static int64_t dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5LL;\n            }\n        }\n        data = dataBuffer;\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108346_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL; \n    if(globalReturnsTrue())\n    {\n        {\n            int * dataBuffer = (int *)ALLOCA(100*sizeof(int));\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printIntLine(data[0]);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,690,400]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108372_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int *> dataList)\n{\n    int * data = dataList.back();\n    printIntLine(data[0]);\n    free(data);\n}\n\n} #include <list>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int *> dataList);\n\nvoid xnzxbnd()\n{\n    int * data;\n    list<int *> dataList;\n    data = NULL; \n    {\n        int * dataBuffer = (int *)ALLOCA(100*sizeof(int));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5;\n            }\n        }\n        data = dataBuffer;\n    }\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772,401]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108398_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * data)\n{\n    printIntLine(data[0]);\n    free(data);\n}\n\nvoid qhwystdd()\n{\n    int * data;\n    data = NULL; \n    {\n        int dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108424_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL; \n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            static int dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printIntLine(data[0]);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108450_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nextern int * var1;\nextern int * var2;\n\n\n\nvoid ppoeidn()\n{\n    int * data = var1;\n    printIntLine(data[0]);\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\nint * var1;\nint * var2;\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    int * data;\n    data = NULL; \n    {\n        static int dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5;\n            }\n        }\n        data = dataBuffer;\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108476_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    long * &dataRef = data;\n    data = NULL; \n    {\n        long * dataBuffer = (long *)ALLOCA(100*sizeof(long));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5L;\n            }\n        }\n        data = dataBuffer;\n    }\n    {\n        long * data = dataRef;\n        printLongLine(data[0]);\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[672,416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108502_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    if(staticFive==5)\n    {\n        {\n            long dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i] = 5L;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printLongLine(data[0]);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108528_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(long * dataArray[])\n{\n    long * data = dataArray[2];\n    printLongLine(data[0]);\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(long * dataArray[]);\n\nvoid xnzxbnd()\n{\n    long * data;\n    long * dataArray[5];\n    data = NULL; \n    {\n        long dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5L;\n            }\n        }\n        data = dataBuffer;\n    }\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108554_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL; \n    {\n        static long dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5L;\n            }\n        }\n        data = dataBuffer;\n    }\n    {\n        long * dataCopy = data;\n        long * data = dataCopy;\n        printLongLine(data[0]);\n        free(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108580_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    if(staticTrue)\n    {\n        {\n            twoIntsStruct * dataBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i].intOne = 1;\n                    dataBuffer[i].intTwo = 1;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printStructLine(&data[0]);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,672]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108606_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    twoIntsStruct * * dataPtr = (twoIntsStruct * *)dataVoidPtr;\n    twoIntsStruct * data = (*dataPtr);\n    printStructLine(&data[0]);\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    {\n        twoIntsStruct * dataBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i].intOne = 1;\n                dataBuffer[i].intTwo = 1;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,754]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108632_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    int i;\n    twoIntsStruct * data;\n    data = NULL; \n    for(i = 0; i < 1; i++)\n    {\n        {\n            twoIntsStruct dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i].intOne = 1;\n                    dataBuffer[i].intTwo = 1;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printStructLine(&data[0]);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108658_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    if(5==5)\n    {\n        {\n            static twoIntsStruct dataBuffer[100];\n            {\n                size_t i;\n                for (i = 0; i < 100; i++)\n                {\n                    dataBuffer[i].intOne = 1;\n                    dataBuffer[i].intTwo = 1;\n                }\n            }\n            data = dataBuffer;\n        }\n    }\n    printStructLine(&data[0]);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108684_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\n\n\nvoid xnzxbnd(twoIntsStruct * data);\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid uytvbdk(twoIntsStruct * data);\n\nvoid xnzxbnd(twoIntsStruct * data)\n{\n    uytvbdk(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(twoIntsStruct * data);\n\nvoid uytvbdk(twoIntsStruct * data)\n{\n    func7(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(twoIntsStruct * data)\n{\n    printStructLine(&data[0]);\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid func9()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    {\n        static twoIntsStruct dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i].intOne = 1;\n                dataBuffer[i].intTwo = 1;\n            }\n        }\n        data = dataBuffer;\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-590"],"filename":"000108710_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL; \n    switch(6)\n    {\n    case 6:\n    {\n        wchar_t * dataBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));\n        wmemset(dataBuffer, L'A', 100-1); \n        dataBuffer[100-1] = L'\\0'; \n        data = dataBuffer;\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    printWLine(data);\n    free(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,789,416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113116_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nextern int var1;\n\nvoid ppoeidn(char * data)\n{\n    if(var1)\n    {\n        delete [] data;\n    }\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(char * data);\n\nvoid uytvbdk()\n{\n    char * data;\n    data = NULL;\n    data = (char *)calloc(100, sizeof(char));\n    var1 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113224_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(char * data);\n\nvoid ppoeidn(char * data)\n{\n    qazmlps(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data);\n\nvoid qazmlps(char * data)\n{\n    func7(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data)\n{\n    delete [] data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * data);\n\nvoid ppoeidn0()\n{\n    char * data;\n    data = NULL;\n    data = NULL;\n    data = (char *)realloc(data, 100*sizeof(char));\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762,672]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113325_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    TwoIntsClass * * dataPtr = (TwoIntsClass * *)dataVoidPtr;\n    TwoIntsClass * data = (*dataPtr);\n    delete [] data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = (TwoIntsClass *)malloc(100*sizeof(TwoIntsClass));\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762,401]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113424_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    int64_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    int64_t * data = myStruct.structFirst;\n    delete [] data;\n}\n\n} \n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    int64_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    structType myStruct;\n    data = NULL;\n    data = (int64_t *)calloc(100, sizeof(int64_t));\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113523_1.txt"},"language":"lang-cpp","code":"#include <list>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int64_t *> dataList)\n{\n    int64_t * data = dataList.back();\n    delete [] data;\n}\n\n} #include <list>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int64_t *> dataList);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    list<int64_t *> dataList;\n    data = NULL;\n    data = NULL;\n    data = (int64_t *)realloc(data, 100*sizeof(int64_t));\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,401,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113624_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(int * dataCopy);\n    ~GenClass1();\n\nprivate:\n    int * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(int * dataCopy)\n{\n    data = dataCopy;\n    data = (int *)malloc(100*sizeof(int));\n}\n\nGenClass1::~GenClass1()\n{\n    delete [] data;\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    int * data;\n    data = NULL;\n    GenClass1 * var1 = new GenClass1(data);\n    delete var1;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,415,672]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113751_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(long * data);\n\nvoid ppoeidn(long * data)\n{\n    qazmlps(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(long * data)\n{\n    delete [] data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(long * data);\n\nvoid func7()\n{\n    long * data;\n    data = NULL;\n    data = (long *)malloc(100*sizeof(long));\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113852_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * * dataPtr)\n{\n    twoIntsStruct * data = *dataPtr;\n    delete [] data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * * dataPtr);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000113951_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * dataArray[])\n{\n    twoIntsStruct * data = dataArray[2];\n    delete [] data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * dataArray[]);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    twoIntsStruct * dataArray[5];\n    data = NULL;\n    data = NULL;\n    data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,415]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114050_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<wchar_t *> dataVector)\n{\n    wchar_t * data = dataVector[2];\n    delete [] data;\n}\n\n} #include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<wchar_t *> dataVector);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    vector<wchar_t *> dataVector;\n    data = NULL;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,401,789]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114151_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(char * dataCopy);\n    ~GenClass1();\n\nprivate:\n    char * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(char * dataCopy)\n{\n    data = dataCopy;\n    data = (char *)calloc(100, sizeof(char));\n}\n\nGenClass1::~GenClass1()\n{\n    delete data;\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,415,672]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114278_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * data)\n{\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * data);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = (TwoIntsClass *)calloc(100, sizeof(TwoIntsClass));\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114377_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(TwoIntsClass * data);\n\nvoid ppoeidn(TwoIntsClass * data)\n{\n    qazmlps(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid func7(TwoIntsClass * data);\n\nvoid qazmlps(TwoIntsClass * data)\n{\n    func7(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(TwoIntsClass * data);\n\nvoid func7(TwoIntsClass * data)\n{\n    ppoeidn0(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(TwoIntsClass * data)\n{\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * data);\n\nvoid ppoeidn3()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = NULL;\n    data = (TwoIntsClass *)realloc(data, 100*sizeof(TwoIntsClass));\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,789,690]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114478_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * data)\n{\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * data);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    void (*funcPtr) (int64_t *) = ppoeidn;\n    data = NULL;\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114577_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nextern int * var1;\nextern int * var2;\nextern int * var3;\n\n\n\nvoid ppoeidn()\n{\n    int * data = var1;\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\nint * var1;\nint * var2;\nint * var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    int * data;\n    data = NULL;\n    data = (int *)calloc(100, sizeof(int));\n    var1 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,415]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114676_1.txt"},"language":"lang-cpp","code":"#include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap)\n{\n    int * data = dataMap[2];\n    delete data;\n}\n\n} #include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int *> dataMap);\n\nvoid qazmlps()\n{\n    int * data;\n    map<int, int *> dataMap;\n    data = NULL;\n    data = NULL;\n    data = (int *)realloc(data, 100*sizeof(int));\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,476]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114796_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nextern int var1;\n\nvoid ppoeidn(long * data)\n{\n    if(var1)\n    {\n        delete data;\n    }\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(long * data);\n\nvoid uytvbdk()\n{\n    long * data;\n    data = NULL;\n    data = NULL;\n    data = (long *)realloc(data, 100*sizeof(long));\n    var1 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000114904_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(twoIntsStruct * data);\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    qazmlps(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid func7(twoIntsStruct * data);\n\nvoid qazmlps(twoIntsStruct * data)\n{\n    func7(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid func7(twoIntsStruct * data)\n{\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid ppoeidn0()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115005_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;\n    wchar_t * data = (*dataPtr);\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    data = (wchar_t *)calloc(100, sizeof(wchar_t));\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115104_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    wchar_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    wchar_t * data = myStruct.structFirst;\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    wchar_t * structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    structType myStruct;\n    data = NULL;\n    data = NULL;\n    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,782]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115143_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(char * data)\n{\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    char * data;\n    void (*funcPtr) (char *) = ppoeidn;\n    data = NULL;\n    data = new char[100];\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115178_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = new TwoIntsClass[100];\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        delete data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115213_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(1)\n    {\n        data = new int64_t[100];\n    }\n    if(1)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115248_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    int64_t * * dataPtr = (int64_t * *)dataVoidPtr;\n    int64_t * data = (*dataPtr);\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    data = NULL;\n    data = new int64_t[100];\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115283_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\ntypedef union\n{\n    int * unionFirst;\n    int * unionSecond;\n} unionType;\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    unionType myUnion;\n    data = NULL;\n    data = new int[100];\n    myUnion.unionFirst = data;\n    {\n        int * data = myUnion.unionSecond;\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115318_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new long[100];\n    }\n    if(globalReturnsTrue())\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115353_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(long * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(long * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(long * data)\n{\n    delete data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    long * data;\n    data = NULL;\n    data = new long[100];\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,415]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115388_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(twoIntsStruct * data);\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    qazmlps(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid func7(twoIntsStruct * data);\n\nvoid qazmlps(twoIntsStruct * data)\n{\n    func7(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(twoIntsStruct * data);\n\nvoid func7(twoIntsStruct * data)\n{\n    ppoeidn0(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(twoIntsStruct * data)\n{\n    delete data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid ppoeidn3()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = new twoIntsStruct[100];\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115423_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nextern int var1;\n\nvoid ppoeidn(wchar_t * data)\n{\n    if(var1)\n    {\n        delete data;\n    }\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(wchar_t * data);\n\nvoid uytvbdk()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t[100];\n    var1 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115488_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * * dataPtr)\n{\n    char * data = *dataPtr;\n    free(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * * dataPtr);\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    data = new char[100];\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115587_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * dataArray[])\n{\n    int64_t * data = dataArray[2];\n    free(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int64_t * dataArray[]);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    int64_t * dataArray[5];\n    data = NULL;\n    data = new int64_t[100];\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115686_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<long *> dataVector)\n{\n    long * data = dataVector[2];\n    free(data);\n}\n\n} #include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<long *> dataVector);\n\nvoid qazmlps()\n{\n    long * data;\n    vector<long *> dataVector;\n    data = NULL;\n    data = new long[100];\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,415]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115787_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(wchar_t * dataCopy);\n    ~GenClass1();\n\nprivate:\n    wchar_t * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(wchar_t * dataCopy)\n{\n    data = dataCopy;\n    data = new wchar_t[100];\n}\n\nGenClass1::~GenClass1()\n{\n    free(data);\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115822_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(char * data);\n\nvoid ppoeidn(char * data)\n{\n    qazmlps(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid func7(char * data);\n\nvoid qazmlps(char * data)\n{\n    func7(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(char * data);\n\nvoid func7(char * data)\n{\n    ppoeidn0(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(char * data)\n{\n    delete [] data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(char * data);\n\nvoid ppoeidn3()\n{\n    char * data;\n    data = NULL;\n    data = new char;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,789]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115857_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nextern int var1;\n\nvoid ppoeidn(TwoIntsClass * data)\n{\n    if(var1)\n    {\n        delete [] data;\n    }\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(TwoIntsClass * data);\n\nvoid uytvbdk()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass;\n    var1 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115892_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = new int64_t;\n    }\n    if(staticFive==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115927_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int64_t *> dataVector)\n{\n    int64_t * data = dataVector[2];\n    delete [] data;\n}\n\n} #include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int64_t *> dataVector);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    vector<int64_t *> dataVector;\n    data = NULL;\n    data = new int64_t;\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,401]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115962_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\nstatic int * var2;\nstatic int * var3;\nstatic int * var4;\n\n\n\nstatic void ppoeidn()\n{\n    int * data = var2;\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    var2 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000115997_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    while(1)\n    {\n        data = new long;\n        break;\n    }\n    while(1)\n    {\n        delete [] data;\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116032_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = new twoIntsStruct;\n    }\n    if(5==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116067_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    delete [] data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid qazmlps()\n{\n    twoIntsStruct * data;\n    void (*funcPtr) (twoIntsStruct *) = ppoeidn;\n    data = NULL;\n    data = new twoIntsStruct;\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116102_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(wchar_t * data)\n{\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t;\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116167_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nextern char * var1;\nextern char * var2;\nextern char * var3;\n\n\n\nvoid ppoeidn()\n{\n    char * data = var1;\n    free(data);\n}\n\n} \n\nnamespace GenNS1\n{\n\nchar * var1;\nchar * var2;\nchar * var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    data = new char;\n    var1 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116266_1.txt"},"language":"lang-cpp","code":"#include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap)\n{\n    int64_t * data = dataMap[2];\n    free(data);\n}\n\n} #include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    map<int, int64_t *> dataMap;\n    data = NULL;\n    data = new int64_t;\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,476]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116386_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nextern int var1;\n\nvoid ppoeidn(twoIntsStruct * data)\n{\n    if(var1)\n    {\n        free(data);\n    }\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(twoIntsStruct * data);\n\nvoid uytvbdk()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = new twoIntsStruct;\n    var1 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116468_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(1)\n    {\n        {\n            char myString[] = \"myString\";\n            data = strdup(myString);\n        }\n    }\n    if(1)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116503_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    char * * dataPtr = (char * *)dataVoidPtr;\n    char * data = (*dataPtr);\n    delete [] data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    char * data;\n    data = NULL;\n    {\n        char myString[] = \"myString\";\n        data = strdup(myString);\n    }\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116538_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\ntypedef union\n{\n    wchar_t * unionFirst;\n    wchar_t * unionSecond;\n} unionType;\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    unionType myUnion;\n    data = NULL;\n    {\n        wchar_t myString[] = L\"myString\";\n        data = wcsdup(myString);\n    }\n    myUnion.unionFirst = data;\n    {\n        wchar_t * data = myUnion.unionSecond;\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116573_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        {\n            char myString[] = \"myString\";\n            data = strdup(myString);\n        }\n    }\n    if(globalReturnsTrue())\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116608_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(char * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(char * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(char * data)\n{\n    delete data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    {\n        char myString[] = \"myString\";\n        data = strdup(myString);\n    }\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000116643_1.txt"},"language":"lang-cpp","code":"\n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(wchar_t * data);\n\nvoid ppoeidn(wchar_t * data)\n{\n    qazmlps(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(wchar_t * data);\n\nvoid qazmlps(wchar_t * data)\n{\n    func7(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(wchar_t * data);\n\nvoid func7(wchar_t * data)\n{\n    ppoeidn0(data);\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(wchar_t * data)\n{\n    delete data;\n}\n\n} \n\n#include <wchar.h>\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * data);\n\nvoid ppoeidn3()\n{\n    wchar_t * data;\n    data = NULL;\n    {\n        wchar_t myString[] = L\"myString\";\n        data = wcsdup(myString);\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000241732_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    goto source;\nsource:\n    data = (char *)calloc(100, sizeof(char));\n    if (data == NULL) {exit(-1);}\n    goto var2;\nvar2:\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000241767_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    char * *dataPtr1 = &data;\n    char * *dataPtr2 = &data;\n    data = NULL;\n    {\n        char * data = *dataPtr1;\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        *dataPtr1 = data;\n    }\n    {\n        char * data = *dataPtr2;\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000241802_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(char * data)\n{\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    data = NULL;\n    data = (char *)realloc(data, 100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000241837_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(TwoIntsClass * data)\n{\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    void (*funcPtr) (TwoIntsClass *) = ppoeidn;\n    data = NULL;\n    data = (TwoIntsClass *)calloc(100, sizeof(TwoIntsClass));\n    if (data == NULL) {exit(-1);}\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000241872_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * &data)\n{\n    data = (TwoIntsClass *)malloc(100*sizeof(TwoIntsClass));\n    if (data == NULL) {exit(-1);}\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * &data);\n\nvoid qazmlps()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    ppoeidn(data);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000241907_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    data = (int64_t *)calloc(100, sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000241942_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = (int64_t *)malloc(100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000241977_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int64_t * data;\n    data = NULL;\n    if(staticFive==5)\n    {\n        data = NULL;\n        data = (int64_t *)realloc(data, 100*sizeof(int64_t));\n        if (data == NULL) {exit(-1);}\n    }\n    if(staticFive==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242012_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(globalTrue)\n    {\n        data = (int *)calloc(100, sizeof(int));\n        if (data == NULL) {exit(-1);}\n    }\n    if(globalTrue)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242047_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242082_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    while(1)\n    {\n        data = NULL;\n        data = (int *)realloc(data, 100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        break;\n    }\n    while(1)\n    {\n        delete [] data;\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242117_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic int var2 = 0;\n\nstatic void ppoeidn(long * data)\n{\n    if(var2)\n    {\n        delete [] data;\n    }\n}\n\nvoid qhwystdd()\n{\n    long * data;\n    data = NULL;\n    data = (long *)calloc(100, sizeof(long));\n    if (data == NULL) {exit(-1);}\n    var2 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242152_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    long * &dataRef = data;\n    data = NULL;\n    data = (long *)malloc(100*sizeof(long));\n    if (data == NULL) {exit(-1);}\n    {\n        long * data = dataRef;\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242187_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic long * ppoeidn(long * data)\n{\n    data = NULL;\n    data = (long *)realloc(data, 100*sizeof(long));\n    if (data == NULL) {exit(-1);}\n    return data;\n}\n\nvoid qhwystdd()\n{\n    long * data;\n    data = NULL;\n    data = ppoeidn(data);\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762,401]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242222_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\nstatic twoIntsStruct * var2;\nstatic twoIntsStruct * var3;\nstatic twoIntsStruct * var4;\n\n\n\nstatic void ppoeidn()\n{\n    twoIntsStruct * data = var2;\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));\n    if (data == NULL) {exit(-1);}\n    var2 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242257_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(twoIntsStruct * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(twoIntsStruct * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(twoIntsStruct * data) const\n{\n    delete [] data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n    if (data == NULL) {exit(-1);}\n    const GenClass1& o = GenClass2();\n    o.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242292_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(1)\n    {\n        data = (wchar_t *)calloc(100, sizeof(wchar_t));\n        if (data == NULL) {exit(-1);}\n    }\n    if(1)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242327_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = (wchar_t *)malloc(100*sizeof(wchar_t));\n        if (data == NULL) {exit(-1);}\n    }\n    if(staticTrue)\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242362_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\nnamespace var1\n{\n\n\n\nvoid xnzxbnd()\n{\n    wchar_t * data;\n    data = NULL;\n    if(staticReturnsTrue())\n    {\n        data = NULL;\n        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));\n        if (data == NULL) {exit(-1);}\n    }\n    if(staticReturnsTrue())\n    {\n        delete [] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,665]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242397_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = (char *)calloc(100, sizeof(char));\n        if (data == NULL) {exit(-1);}\n    }\n    if(globalReturnsTrue())\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242432_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalFive==5)\n    {\n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n    }\n    if(globalFive==5)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242467_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    char * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = NULL;\n        data = (char *)realloc(data, 100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n    }\n    for(j = 0; j < 1; j++)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242502_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = (TwoIntsClass *)calloc(100, sizeof(TwoIntsClass));\n    if (data == NULL) {exit(-1);}\n    {\n        TwoIntsClass * dataCopy = data;\n        TwoIntsClass * data = dataCopy;\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242537_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\ntypedef union\n{\n    TwoIntsClass * unionFirst;\n    TwoIntsClass * unionSecond;\n} unionType;\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    unionType myUnion;\n    data = NULL;\n    data = (TwoIntsClass *)malloc(100*sizeof(TwoIntsClass));\n    if (data == NULL) {exit(-1);}\n    myUnion.unionFirst = data;\n    {\n        TwoIntsClass * data = myUnion.unionSecond;\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242572_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * &data)\n{\n    data = NULL;\n    data = (TwoIntsClass *)realloc(data, 100*sizeof(TwoIntsClass));\n    if (data == NULL) {exit(-1);}\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    ppoeidn(data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242607_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nint64_t * ppoeidn(int64_t * data)\n{\n    data = (int64_t *)calloc(100, sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    return data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nint64_t * ppoeidn(int64_t * data);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    data = NULL;\n    data = ppoeidn(data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242642_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int64_t * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int64_t * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int64_t * data)\n{\n    delete data;\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    int64_t * data;\n    data = NULL;\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242677_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(5==5)\n    {\n        data = (int *)calloc(100, sizeof(int));\n        if (data == NULL) {exit(-1);}\n    }\n    if(5==5)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242712_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_FIVE = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = (int *)malloc(100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242747_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = NULL;\n        data = (int *)realloc(data, 100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242782_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = (long *)calloc(100, sizeof(long));\n        if (data == NULL) {exit(-1);}\n    }\n    else\n    {\n        data = new long;\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        delete data;\n    }\n    else\n    {\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,672]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242817_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = (long *)malloc(100*sizeof(long));\n        if (data == NULL) {exit(-1);}\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        delete data;\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242852_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    goto source;\nsource:\n    data = NULL;\n    data = (long *)realloc(data, 100*sizeof(long));\n    if (data == NULL) {exit(-1);}\n    goto var2;\nvar2:\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,772]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242887_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    twoIntsStruct * data;\n    twoIntsStruct * *dataPtr1 = &data;\n    twoIntsStruct * *dataPtr2 = &data;\n    data = NULL;\n    {\n        twoIntsStruct * data = *dataPtr1;\n        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        *dataPtr1 = data;\n    }\n    {\n        twoIntsStruct * data = *dataPtr2;\n        delete data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242922_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(twoIntsStruct * data)\n{\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    data = NULL;\n    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n    if (data == NULL) {exit(-1);}\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242957_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(twoIntsStruct * data)\n{\n    delete data;\n}\n\nvoid qhwystdd()\n{\n    twoIntsStruct * data;\n    void (*funcPtr) (twoIntsStruct *) = ppoeidn;\n    data = NULL;\n    data = NULL;\n    data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));\n    if (data == NULL) {exit(-1);}\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000242992_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * &data)\n{\n    data = (wchar_t *)calloc(100, sizeof(wchar_t));\n    if (data == NULL) {exit(-1);}\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(wchar_t * &data);\n\nvoid qazmlps()\n{\n    wchar_t * data;\n    data = NULL;\n    ppoeidn(data);\n    delete data;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243027_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    data = NULL;\n    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));\n    if (data == NULL) {exit(-1);}\n    delete data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243062_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(1)\n    {\n        data = new char[100];\n    }\n    if(1)\n    {\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243097_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    if(staticTrue)\n    {\n        data = new TwoIntsClass[100];\n    }\n    if(staticTrue)\n    {\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,762]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243132_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\nnamespace var1\n{\n\n\n\nvoid xnzxbnd()\n{\n    int64_t * data;\n    data = NULL;\n    if(staticReturnsTrue())\n    {\n        data = new int64_t[100];\n    }\n    if(staticReturnsTrue())\n    {\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243167_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    if(globalReturnsTrue())\n    {\n        data = new int[100];\n    }\n    if(globalReturnsTrue())\n    {\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[415]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243202_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    long * data;\n    data = NULL;\n    if(globalFive==5)\n    {\n        data = new long[100];\n    }\n    if(globalFive==5)\n    {\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243237_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    twoIntsStruct * data;\n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new twoIntsStruct[100];\n    }\n    for(j = 0; j < 1; j++)\n    {\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[401]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243272_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    wchar_t * data;\n    data = NULL;\n    data = new wchar_t[100];\n    {\n        wchar_t * dataCopy = data;\n        wchar_t * data = dataCopy;\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243307_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\ntypedef union\n{\n    char * unionFirst;\n    char * unionSecond;\n} unionType;\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    unionType myUnion;\n    data = NULL;\n    data = new char;\n    myUnion.unionFirst = data;\n    {\n        char * data = myUnion.unionSecond;\n        free(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243342_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(TwoIntsClass * &data)\n{\n    data = new TwoIntsClass;\n}\n\nvoid qhwystdd()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    ppoeidn(data);\n    free(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243377_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nint64_t * ppoeidn(int64_t * data)\n{\n    data = new int64_t;\n    return data;\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nint64_t * ppoeidn(int64_t * data);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    data = NULL;\n    data = ppoeidn(data);\n    free(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416]}},{"data":{"cwe_ids":["CWE-762"],"filename":"000243412_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int * data)\n{\n    free(data);\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    int * data;\n    data = NULL;\n    data = new int;\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[416,401]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116659_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116660_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(1)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116661_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(5==5)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116662_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(STATIC_CONST_TRUE)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[778,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116663_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(staticTrue)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116664_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116665_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(staticFive==5)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116666_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(staticReturnsTrue())\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116667_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116668_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(globalTrue)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116669_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(globalReturnsTrue())\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116670_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(globalReturnsTrueOrFalse())\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n    else\n    {\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116671_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116672_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(globalFive==5)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116673_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    switch(6)\n    {\n    case 6:\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116674_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    while(1)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116675_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int j;\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    for(j = 0; j < 1; j++)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,674]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116676_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    goto var1;\nvar1:\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116677_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic int var1 = 0;\n\nstatic void ppoeidn(FILE * data)\n{\n    if(var1)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,674,404]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116678_1.txt"},"language":"lang-cpp","code":"\n\n\n\nextern int var1;\n\nvoid ppoeidn(FILE * data)\n{\n    if(var1)\n    {\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(FILE * data);\n\nvoid qazmlps()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116679_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    {\n        FILE * dataCopy = data;\n        FILE * data = dataCopy;\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116680_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    FILE * *dataPtr1 = &data;\n    FILE * *dataPtr2 = &data;\n    data = NULL;\n    {\n        FILE * data = *dataPtr1;\n        data = fopen(\", \"w+\");\n        *dataPtr1 = data;\n    }\n    {\n        FILE * data = *dataPtr2;\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,675]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116681_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    FILE * &dataRef = data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    {\n        FILE * data = dataRef;\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116682_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\ntypedef union\n{\n    FILE * unionFirst;\n    FILE * unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    var1 myUnion;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    myUnion.unionFirst = data;\n    {\n        FILE * data = myUnion.unionSecond;\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116683_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic void ppoeidn(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116684_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic FILE * ppoeidn(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    return data;\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = ppoeidn(data);\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116685_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(FILE * &data)\n{\n    data = fopen(\", \"w+\");\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    ppoeidn(data);\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116686_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic void ppoeidn(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    void (*funcPtr) (FILE *) = ppoeidn;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116687_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic FILE * var1;\nstatic FILE * var2;\n\n\n\nstatic void ppoeidn()\n{\n    FILE * data = var1;\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116688_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116689_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid xnzxbnd(FILE * data);\n\nvoid ppoeidn(FILE * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n\n\nvoid xnzxbnd(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid uytvbdk()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116690_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid xnzxbnd(FILE * data);\n\nvoid ppoeidn(FILE * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n\n\nvoid uytvbdk(FILE * data);\n\nvoid xnzxbnd(FILE * data)\n{\n    uytvbdk(data);\n}\n\n\n\n\n\nvoid uytvbdk(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid func7()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116691_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid xnzxbnd(FILE * data);\n\nvoid ppoeidn(FILE * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n\n\nvoid uytvbdk(FILE * data);\n\nvoid xnzxbnd(FILE * data)\n{\n    uytvbdk(data);\n}\n\n\n\n\n\nvoid func7(FILE * data);\n\nvoid uytvbdk(FILE * data)\n{\n    func7(data);\n}\n\n\n\n\n\nvoid func7(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid func9()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775,675]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116692_1.txt"},"language":"lang-cpp","code":"\n\n\n\nFILE * ppoeidn(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    return data;\n}\n\n\n\n\n\nFILE * ppoeidn(FILE * data);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = ppoeidn(data);\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,674,22,362]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116693_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(FILE * &data)\n{\n    data = fopen(\", \"w+\");\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(FILE * &data);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    ppoeidn(data);\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,674]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116694_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(FILE * * dataPtr)\n{\n    FILE * data = *dataPtr;\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(FILE * * dataPtr);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116695_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    FILE * * dataPtr = (FILE * *)dataVoidPtr;\n    FILE * data = (*dataPtr);\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116696_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    void (*funcPtr) (FILE *) = ppoeidn;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116697_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(FILE * dataArray[])\n{\n    FILE * data = dataArray[2];\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\n\n\nvoid ppoeidn(FILE * dataArray[]);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    FILE * dataArray[5];\n    data = NULL;\n    data = fopen(\", \"w+\");\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116698_1.txt"},"language":"lang-cpp","code":"\n\ntypedef struct var1\n{\n    FILE * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    FILE * data = myStruct.structFirst;\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\ntypedef struct var1\n{\n    FILE * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    var2 myStruct;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775,663]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116699_1.txt"},"language":"lang-cpp","code":"\n\nextern FILE * var1;\n\nextern FILE * var2;\n\n\n\nvoid ppoeidn()\n{\n    FILE * data = var1;\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n\n\nFILE * var1;\n\nFILE * var2;\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,22,73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116700_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<FILE *> dataVector)\n{\n    FILE * data = dataVector[2];\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n} #include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<FILE *> dataVector);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    vector<FILE *> dataVector;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,775,674]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116701_1.txt"},"language":"lang-cpp","code":"#include <list>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<FILE *> dataList)\n{\n    FILE * data = dataList.back();\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n} #include <list>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<FILE *> dataList);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    list<FILE *> dataList;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116702_1.txt"},"language":"lang-cpp","code":"#include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, FILE *> dataMap)\n{\n    FILE * data = dataMap[2];\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n} #include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, FILE *> dataMap);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    map<int, FILE *> dataMap;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,661]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116703_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(FILE * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(FILE * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(FILE * data) const\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[79,22,775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116704_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(FILE * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(FILE * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,362,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116705_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(FILE * dataCopy);\n    ~GenClass1();\n\nprivate:\n    FILE * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(FILE * dataCopy)\n{\n    data = dataCopy;\n    data = fopen(\", \"w+\");\n}\n\nGenClass1::~GenClass1()\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,775,396]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116706_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(FILE * dataCopy);\n    ~GenClass1();\n\nprivate:\n    FILE * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(FILE * dataCopy)\n{\n    data = dataCopy;\n    data = fopen(\", \"w+\");\n}\n\nGenClass1::~GenClass1()\n{\n    data = fopen(\", \"w+\");\n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    GenClass1 * var1 = new GenClass1(data);\n    delete var1;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,775,396]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116707_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116708_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(1)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116709_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(5==5)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116710_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(STATIC_CONST_TRUE)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116711_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(staticTrue)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116712_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116713_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(staticFive==5)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116714_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(staticReturnsTrue())\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116715_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116716_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(globalTrue)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116717_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(globalReturnsTrue())\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116718_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(globalReturnsTrueOrFalse())\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n    else\n    {\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116719_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116720_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(globalFive==5)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[79,78,22]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116721_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    switch(6)\n    {\n    case 6:\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116722_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    while(1)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116723_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int j;\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    for(j = 0; j < 1; j++)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116724_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    goto var1;\nvar1:\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116725_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nstatic int var1 = 0;\n\nstatic void ppoeidn(int data)\n{\n    if(var1)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116726_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nextern int var1;\n\nvoid ppoeidn(int data)\n{\n    if(var1)\n    {\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(int data);\n\nvoid qazmlps()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116727_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    {\n        int dataCopy = data;\n        int data = dataCopy;\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116728_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    int *dataPtr1 = &data;\n    int *dataPtr2 = &data;\n    data = -1;\n    {\n        int data = *dataPtr1;\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        *dataPtr1 = data;\n    }\n    {\n        int data = *dataPtr2;\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116729_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    int &dataRef = data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    {\n        int data = dataRef;\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116730_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\ntypedef union\n{\n    int unionFirst;\n    int unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    var1 myUnion;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    myUnion.unionFirst = data;\n    {\n        int data = myUnion.unionSecond;\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116731_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nstatic void ppoeidn(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116732_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nstatic int ppoeidn(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    return data;\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = ppoeidn(data);\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116733_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(int &data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    ppoeidn(data);\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116734_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nstatic void ppoeidn(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\nvoid qhwystdd()\n{\n    int data;\n    void (*funcPtr) (int) = ppoeidn;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116735_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic int var1;\nstatic int var2;\n\n\n\nstatic void ppoeidn()\n{\n    int data = var1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116736_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[22,732]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116737_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid xnzxbnd(int data);\n\nvoid ppoeidn(int data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid xnzxbnd(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid uytvbdk()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116738_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid xnzxbnd(int data);\n\nvoid ppoeidn(int data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid uytvbdk(int data);\n\nvoid xnzxbnd(int data)\n{\n    uytvbdk(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid uytvbdk(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid func7()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116739_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid xnzxbnd(int data);\n\nvoid ppoeidn(int data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid uytvbdk(int data);\n\nvoid xnzxbnd(int data)\n{\n    uytvbdk(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid func7(int data);\n\nvoid uytvbdk(int data)\n{\n    func7(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid func7(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid func9()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[732,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116740_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nint ppoeidn(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    return data;\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nint ppoeidn(int data);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = ppoeidn(data);\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116741_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int &data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n}\n\n} \n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int &data);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    ppoeidn(data);\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116742_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int * dataPtr)\n{\n    int data = *dataPtr;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int * dataPtr);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116743_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    int * dataPtr = (int *)dataVoidPtr;\n    int data = (*dataPtr);\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[732,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116744_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid xnzxbnd()\n{\n    int data;\n    void (*funcPtr) (int) = ppoeidn;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[732]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116745_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int dataArray[])\n{\n    int data = dataArray[2];\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int dataArray[]);\n\nvoid xnzxbnd()\n{\n    int data;\n    int dataArray[5];\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,120]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116746_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\ntypedef struct var1\n{\n    int structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    int data = myStruct.structFirst;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\ntypedef struct var1\n{\n    int structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid xnzxbnd()\n{\n    int data;\n    var2 myStruct;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[732,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116747_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nextern int var1;\n\nextern int var2;\n\n\n\nvoid ppoeidn()\n{\n    int data = var1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nint var1;\n\nint var2;\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116748_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int> dataVector)\n{\n    int data = dataVector[2];\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n} #include <vector>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int> dataVector);\n\nvoid xnzxbnd()\n{\n    int data;\n    vector<int> dataVector;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116749_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int> dataList)\n{\n    int data = dataList.back();\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n} #include <list>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int> dataList);\n\nvoid xnzxbnd()\n{\n    int data;\n    list<int> dataList;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,682]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116750_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int> dataMap)\n{\n    int data = dataMap[2];\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n} #include <map>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int> dataMap);\n\nvoid xnzxbnd()\n{\n    int data;\n    map<int, int> dataMap;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116751_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int data) const\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664,22]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116752_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116753_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(int dataCopy);\n    ~GenClass1();\n\nprivate:\n    int data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(int dataCopy)\n{\n    data = dataCopy;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n}\n\nGenClass1::~GenClass1()\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116754_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(int dataCopy);\n    ~GenClass1();\n\nprivate:\n    int data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(int dataCopy)\n{\n    data = dataCopy;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n}\n\nGenClass1::~GenClass1()\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    GenClass1 * var1 = new GenClass1(data);\n    delete var1;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664,22]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116755_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <windows.h>\n\n\n\nvoid ppoeidn()\n{\n    HANDLE data;\n    data = INVALID_HANDLE_VALUE;\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    if (data != INVALID_HANDLE_VALUE)\n    {\n        CloseHandle(data);\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[22,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116756_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <windows.h>\n\n\n\nvoid ppoeidn()\n{\n    HANDLE data;\n    data = INVALID_HANDLE_VALUE;\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    if(1)\n    {\n        data = CreateFile(\",\n                          (GENERIC_WRITE|GENERIC_READ),\n                          0,\n                          NULL,\n                          OPEN_ALWAYS,\n                          FILE_ATTRIBUTE_NORMAL,\n                          NULL);\n        if (data != INVALID_HANDLE_VALUE)\n        {\n            CloseHandle(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[22,73,664]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116757_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <windows.h>\n\n\n\nvoid ppoeidn()\n{\n    HANDLE data;\n    data = INVALID_HANDLE_VALUE;\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    if(5==5)\n    {\n        data = CreateFile(\",\n                          (GENERIC_WRITE|GENERIC_READ),\n                          0,\n                          NULL,\n                          OPEN_ALWAYS,\n                          FILE_ATTRIBUTE_NORMAL,\n                          NULL);\n        if (data != INVALID_HANDLE_VALUE)\n        {\n            CloseHandle(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[22,664,775]}},{"data":{"cwe_ids":["CWE-773"],"filename":"000116758_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <windows.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    HANDLE data;\n    data = INVALID_HANDLE_VALUE;\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    if(STATIC_CONST_TRUE)\n    {\n        data = CreateFile(\",\n                          (GENERIC_WRITE|GENERIC_READ),\n                          0,\n                          NULL,\n                          OPEN_ALWAYS,\n                          FILE_ATTRIBUTE_NORMAL,\n                          NULL);\n        if (data != INVALID_HANDLE_VALUE)\n        {\n            CloseHandle(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,22]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116803_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116804_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(1)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116805_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(5==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116806_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(STATIC_CONST_TRUE)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116807_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116808_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(STATIC_CONST_FIVE==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[22,774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116809_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(staticFive==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116810_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(staticReturnsTrue())\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116811_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(GLOBAL_CONST_TRUE)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116812_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(globalTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116813_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(globalReturnsTrue())\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116814_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(globalReturnsTrueOrFalse())\n    {\n        ; \n    }\n    else\n    {\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116815_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116816_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    if(globalFive==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116817_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    switch(6)\n    {\n    case 6:\n        ; \n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116818_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    while(1)\n    {\n        ; \n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116819_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int j;\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116820_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    goto var1;\nvar1:\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116821_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic int var1 = 0;\n\nstatic void ppoeidn(FILE * data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,674,404]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116822_1.txt"},"language":"lang-cpp","code":"\n\n\n\nextern int var1;\n\nvoid ppoeidn(FILE * data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\n\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(FILE * data);\n\nvoid qazmlps()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116823_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    {\n        FILE * dataCopy = data;\n        FILE * data = dataCopy;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116824_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    FILE * *dataPtr1 = &data;\n    FILE * *dataPtr2 = &data;\n    data = NULL;\n    {\n        FILE * data = *dataPtr1;\n        data = fopen(\", \"w+\");\n        *dataPtr1 = data;\n    }\n    {\n        FILE * data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116825_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    FILE * &dataRef = data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    {\n        FILE * data = dataRef;\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116826_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\ntypedef union\n{\n    FILE * unionFirst;\n    FILE * unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    var1 myUnion;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    myUnion.unionFirst = data;\n    {\n        FILE * data = myUnion.unionSecond;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116827_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic void ppoeidn(FILE * data)\n{\n    ; \n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116828_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic FILE * ppoeidn(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    return data;\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = ppoeidn(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,664,73]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116829_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(FILE * &data)\n{\n    data = fopen(\", \"w+\");\n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    ppoeidn(data);\n    ; \n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,674]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116830_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n\n\nstatic void ppoeidn(FILE * data)\n{\n    ; \n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    void (*funcPtr) (FILE *) = ppoeidn;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116831_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\nstatic FILE * var1;\nstatic FILE * var2;\n\n\n\nstatic void ppoeidn()\n{\n    FILE * data = var1;\n    ; \n}\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[775]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116832_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(FILE * data)\n{\n    ; \n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116833_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid xnzxbnd(FILE * data);\n\nvoid ppoeidn(FILE * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n\n\nvoid xnzxbnd(FILE * data)\n{\n    ; \n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid uytvbdk()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116834_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid xnzxbnd(FILE * data);\n\nvoid ppoeidn(FILE * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n\n\nvoid uytvbdk(FILE * data);\n\nvoid xnzxbnd(FILE * data)\n{\n    uytvbdk(data);\n}\n\n\n\n\n\nvoid uytvbdk(FILE * data)\n{\n    ; \n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid func7()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116835_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid xnzxbnd(FILE * data);\n\nvoid ppoeidn(FILE * data)\n{\n    xnzxbnd(data);\n}\n\n\n\n\n\nvoid uytvbdk(FILE * data);\n\nvoid xnzxbnd(FILE * data)\n{\n    uytvbdk(data);\n}\n\n\n\n\n\nvoid func7(FILE * data);\n\nvoid uytvbdk(FILE * data)\n{\n    func7(data);\n}\n\n\n\n\n\nvoid func7(FILE * data)\n{\n    ; \n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid func9()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116836_1.txt"},"language":"lang-cpp","code":"\n\n\n\nFILE * ppoeidn(FILE * data)\n{\n    data = fopen(\", \"w+\");\n    return data;\n}\n\n\n\n\n\nFILE * ppoeidn(FILE * data);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = ppoeidn(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116837_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(FILE * &data)\n{\n    data = fopen(\", \"w+\");\n}\n\n} \n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(FILE * &data);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    ppoeidn(data);\n    ; \n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116838_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(FILE * * dataPtr)\n{\n    FILE * data = *dataPtr;\n    ; \n}\n\n\n\n\n\nvoid ppoeidn(FILE * * dataPtr);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116839_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    FILE * * dataPtr = (FILE * *)dataVoidPtr;\n    FILE * data = (*dataPtr);\n    ; \n}\n\n\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,476,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116840_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(FILE * data)\n{\n    ; \n}\n\n\n\n\n\nvoid ppoeidn(FILE * data);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    void (*funcPtr) (FILE *) = ppoeidn;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116841_1.txt"},"language":"lang-cpp","code":"\n\n\n\nvoid ppoeidn(FILE * dataArray[])\n{\n    FILE * data = dataArray[2];\n    ; \n}\n\n\n\n\n\nvoid ppoeidn(FILE * dataArray[]);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    FILE * dataArray[5];\n    data = NULL;\n    data = fopen(\", \"w+\");\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,664,476]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116842_1.txt"},"language":"lang-cpp","code":"\n\ntypedef struct var1\n{\n    FILE * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    FILE * data = myStruct.structFirst;\n    ; \n}\n\n\n\ntypedef struct var1\n{\n    FILE * structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    var2 myStruct;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,676,252]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116843_1.txt"},"language":"lang-cpp","code":"\n\nextern FILE * var1;\n\nextern FILE * var2;\n\n\n\nvoid ppoeidn()\n{\n    FILE * data = var1;\n    ; \n}\n\n\n\nFILE * var1;\n\nFILE * var2;\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116844_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<FILE *> dataVector)\n{\n    FILE * data = dataVector[2];\n    ; \n}\n\n} #include <vector>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<FILE *> dataVector);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    vector<FILE *> dataVector;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[476,787,401,672]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116845_1.txt"},"language":"lang-cpp","code":"#include <list>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<FILE *> dataList)\n{\n    FILE * data = dataList.back();\n    ; \n}\n\n} #include <list>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<FILE *> dataList);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    list<FILE *> dataList;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[404,775,672]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116846_1.txt"},"language":"lang-cpp","code":"#include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, FILE *> dataMap)\n{\n    FILE * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, FILE *> dataMap);\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    map<int, FILE *> dataMap;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,674,476,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116847_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(FILE * data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(FILE * data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(FILE * data) const\n{\n    ; \n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,775,27,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116848_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(FILE * data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(FILE * data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(FILE * data)\n{\n    ; \n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[774,674,20]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116849_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(FILE * dataCopy);\n    ~GenClass1();\n\nprivate:\n    FILE * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(FILE * dataCopy)\n{\n    data = dataCopy;\n    data = fopen(\", \"w+\");\n}\n\nGenClass1::~GenClass1()\n{\n    ; \n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,775]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116850_1.txt"},"language":"lang-cpp","code":"\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(FILE * dataCopy);\n    ~GenClass1();\n\nprivate:\n    FILE * data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(FILE * dataCopy)\n{\n    data = dataCopy;\n    data = fopen(\", \"w+\");\n}\n\nGenClass1::~GenClass1()\n{\n    ; \n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd()\n{\n    FILE * data;\n    data = NULL;\n    GenClass1 * var1 = new GenClass1(data);\n    delete var1;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,404,775]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116851_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,22,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116852_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(1)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,22,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116853_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(5==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116854_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(STATIC_CONST_TRUE)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116855_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(staticTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116856_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(STATIC_CONST_FIVE==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116857_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(staticFive==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116858_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(staticReturnsTrue())\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116859_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(GLOBAL_CONST_TRUE)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116860_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(globalTrue)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116861_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(globalReturnsTrue())\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116862_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(globalReturnsTrueOrFalse())\n    {\n        ; \n    }\n    else\n    {\n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,22,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116863_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116864_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    if(globalFive==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116865_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    switch(6)\n    {\n    case 6:\n        ; \n        break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,22,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116866_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    while(1)\n    {\n        ; \n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[77,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116867_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int j;\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    for(j = 0; j < 1; j++)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,22,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116868_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    goto var1;\nvar1:\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116869_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nstatic int var1 = 0;\n\nstatic void ppoeidn(int data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,22,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116870_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nextern int var1;\n\nvoid ppoeidn(int data)\n{\n    if(var1)\n    {\n        ; \n    }\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(int data);\n\nvoid qazmlps()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116871_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    {\n        int dataCopy = data;\n        int data = dataCopy;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116872_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    int *dataPtr1 = &data;\n    int *dataPtr2 = &data;\n    data = -1;\n    {\n        int data = *dataPtr1;\n        data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        *dataPtr1 = data;\n    }\n    {\n        int data = *dataPtr2;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,682]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116873_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    int &dataRef = data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    {\n        int data = dataRef;\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116874_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\ntypedef union\n{\n    int unionFirst;\n    int unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    var1 myUnion;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    myUnion.unionFirst = data;\n    {\n        int data = myUnion.unionSecond;\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,22,680]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116875_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nstatic void ppoeidn(int data)\n{\n    ; \n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,22,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116876_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nstatic int ppoeidn(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    return data;\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = ppoeidn(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116877_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(int &data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    ppoeidn(data);\n    ; \n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[73,22]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116878_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nstatic void ppoeidn(int data)\n{\n    ; \n}\n\nvoid qhwystdd()\n{\n    int data;\n    void (*funcPtr) (int) = ppoeidn;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676,22]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116879_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nstatic int var1;\nstatic int var2;\n\n\n\nstatic void ppoeidn()\n{\n    int data = var1;\n    ; \n}\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,22,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116880_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data)\n{\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[732,22,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116881_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid xnzxbnd(int data);\n\nvoid ppoeidn(int data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid xnzxbnd(int data)\n{\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid uytvbdk()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,22,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116882_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid xnzxbnd(int data);\n\nvoid ppoeidn(int data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid uytvbdk(int data);\n\nvoid xnzxbnd(int data)\n{\n    uytvbdk(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid uytvbdk(int data)\n{\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid func7()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116883_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid xnzxbnd(int data);\n\nvoid ppoeidn(int data)\n{\n    xnzxbnd(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid uytvbdk(int data);\n\nvoid xnzxbnd(int data)\n{\n    uytvbdk(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid func7(int data);\n\nvoid uytvbdk(int data)\n{\n    func7(data);\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid func7(int data)\n{\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid func9()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func9();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,78,22]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116884_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nint ppoeidn(int data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    return data;\n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nint ppoeidn(int data);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = ppoeidn(data);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676,15]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116885_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int &data)\n{\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n}\n\n} \n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(int &data);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    ppoeidn(data);\n    ; \n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,22,73]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116886_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int * dataPtr)\n{\n    int data = *dataPtr;\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int * dataPtr);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116887_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    int * dataPtr = (int *)dataVoidPtr;\n    int data = (*dataPtr);\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116888_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data)\n{\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int data);\n\nvoid xnzxbnd()\n{\n    int data;\n    void (*funcPtr) (int) = ppoeidn;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,22,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116889_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int dataArray[])\n{\n    int data = dataArray[2];\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\n\n\nvoid ppoeidn(int dataArray[]);\n\nvoid xnzxbnd()\n{\n    int data;\n    int dataArray[5];\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,676]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116890_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\ntypedef struct var1\n{\n    int structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    int data = myStruct.structFirst;\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\ntypedef struct var1\n{\n    int structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid xnzxbnd()\n{\n    int data;\n    var2 myStruct;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,116,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116891_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nextern int var1;\n\nextern int var2;\n\n\n\nvoid ppoeidn()\n{\n    int data = var1;\n    ; \n}\n\n\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nint var1;\n\nint var2;\n\n\n\nvoid ppoeidn();\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,116]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116892_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int> dataVector)\n{\n    int data = dataVector[2];\n    ; \n}\n\n} #include <vector>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<int> dataVector);\n\nvoid xnzxbnd()\n{\n    int data;\n    vector<int> dataVector;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664,22]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116893_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int> dataList)\n{\n    int data = dataList.back();\n    ; \n}\n\n} #include <list>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<int> dataList);\n\nvoid xnzxbnd()\n{\n    int data;\n    list<int> dataList;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664,22]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116894_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int> dataMap)\n{\n    int data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int> dataMap);\n\nvoid xnzxbnd()\n{\n    int data;\n    map<int, int> dataMap;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116895_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int data) const;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int data) const\n{\n    ; \n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664,264]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116896_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(int data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(int data);\n};\n\n}\n\n\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(int data)\n{\n    ; \n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    int data;\n    data = -1;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[676,22,77,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116897_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(int dataCopy);\n    ~GenClass1();\n\nprivate:\n    int data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(int dataCopy)\n{\n    data = dataCopy;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n}\n\nGenClass1::~GenClass1()\n{\n    ; \n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,775,20]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116898_1.txt"},"language":"lang-cpp","code":"\n\n#ifdef _WIN32\n#define OPEN _open\n#define CLOSE _close\n#else\n#include <unistd.h>\n#define OPEN open\n#define CLOSE close\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(int dataCopy);\n    ~GenClass1();\n\nprivate:\n    int data;\n};\n\n}\n\n\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(int dataCopy)\n{\n    data = dataCopy;\n    data = OPEN(\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n}\n\nGenClass1::~GenClass1()\n{\n    ; \n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid xnzxbnd()\n{\n    int data;\n    data = -1;\n    GenClass1 * var1 = new GenClass1(data);\n    delete var1;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,664,27,674]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116899_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <windows.h>\n\n\n\nvoid ppoeidn()\n{\n    HANDLE data;\n    data = INVALID_HANDLE_VALUE;\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    ; \n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[22,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116900_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <windows.h>\n\n\n\nvoid ppoeidn()\n{\n    HANDLE data;\n    data = INVALID_HANDLE_VALUE;\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    if(1)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[22,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116901_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <windows.h>\n\n\n\nvoid ppoeidn()\n{\n    HANDLE data;\n    data = INVALID_HANDLE_VALUE;\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    if(5==5)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[23,664]}},{"data":{"cwe_ids":["CWE-775"],"filename":"000116902_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#include <windows.h>\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    HANDLE data;\n    data = INVALID_HANDLE_VALUE;\n    data = CreateFile(\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    if(STATIC_CONST_TRUE)\n    {\n        ; \n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[22,664]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117016_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nsize_t ppoeidn(size_t data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    return data;\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nsize_t ppoeidn(size_t data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,835]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117076_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(size_t data) = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(size_t data);\n};\n\n}\n\n\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(size_t data)\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n}\n\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nnamespace GenNS1\n{\n\n\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    GenClass1* baseObject = new GenClass2;\n    baseObject->action(data);\n    delete baseObject;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117173_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(size_t dataCopy);\n    ~GenClass1();\n\nprivate:\n    size_t data;\n};\n\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(size_t dataCopy)\n{\n    data = dataCopy;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n}\n\nGenClass1::~GenClass1()\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,170,680]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117257_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t &data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t &data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    ppoeidn(data);\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,824,78,664]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117317_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(size_t dataCopy);\n    ~GenClass1();\n\nprivate:\n    size_t data;\n};\n\n}\n\n\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(size_t dataCopy)\n{\n    data = dataCopy;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n}\n\nGenClass1::~GenClass1()\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,120,484]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117414_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(size_t dataCopy);\n    ~GenClass1();\n\nprivate:\n    size_t data;\n};\n\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(size_t dataCopy)\n{\n    data = dataCopy;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n}\n\nGenClass1::~GenClass1()\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    GenClass1 * var1 = new GenClass1(data);\n    delete var1;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[664,78,824,120,404]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117465_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(5==5)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(5==5)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[170,664,781]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117474_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    else\n    {\n        data = 20;\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n    else\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING) && data < 100)\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string or too large\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,676]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117483_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    {\n        size_t dataCopy = data;\n        size_t data = dataCopy;\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,78,676]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117492_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t data)\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117501_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t dataArray[])\n{\n    size_t data = dataArray[2];\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t dataArray[]);\n\nvoid qazmlps()\n{\n    size_t data;\n    size_t dataArray[5];\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117510_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(size_t dataCopy);\n    ~GenClass1();\n\nprivate:\n    size_t data;\n};\n\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(size_t dataCopy)\n{\n    data = dataCopy;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n}\n\nGenClass1::~GenClass1()\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    GenClass1 * var1 = new GenClass1(data);\n    delete var1;\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":["120","682","789"]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117519_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[788,120,400]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117528_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    goto source;\nsource:\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    goto var2;\nvar2:\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,400,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117537_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn(size_t &data)\n{\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    ppoeidn(data);\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117546_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t * dataPtr)\n{\n    size_t data = *dataPtr;\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t * dataPtr);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117555_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(size_t data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(size_t data) const;\n};\n\n}\n\n\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(size_t data) const\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n}\n\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    const GenClass1& o = GenClass2();\n    o.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117594_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t * dataPtr)\n{\n    size_t data = *dataPtr;\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t * dataPtr);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    fscanf(stdin, \"%ud\", &data);\n    ppoeidn(&data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,789,680]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117605_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(size_t dataCopy);\n    ~GenClass1();\n\nprivate:\n    size_t data;\n};\n\n}\n\n\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(size_t dataCopy)\n{\n    data = dataCopy;\n    fscanf(stdin, \"%ud\", &data);\n}\n\nGenClass1::~GenClass1()\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[788,680,120]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117614_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\nnamespace var1\n{\n\n\n\nvoid xnzxbnd()\n{\n    size_t data;\n    data = 0;\n    if(staticReturnsTrue())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(staticReturnsTrue())\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117623_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    size_t data;\n    data = 0;\n    for(i = 0; i < 1; i++)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    for(j = 0; j < 1; j++)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,404]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117632_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nstatic size_t ppoeidn(size_t data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    return data;\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117641_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t &data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t &data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    ppoeidn(data);\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,680]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117650_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap)\n{\n    size_t data = dataMap[2];\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} #include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap);\n\nvoid qazmlps()\n{\n    size_t data;\n    map<int, size_t> dataMap;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117659_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(staticTrue)\n    {\n        data = rand();\n    }\n    if(staticTrue)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,785]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117668_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(globalFive==5)\n    {\n        data = rand();\n    }\n    if(globalFive==5)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,785]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117677_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    size_t &dataRef = data;\n    data = 0;\n    data = rand();\n    {\n        size_t data = dataRef;\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = new char[data];\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,785]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117686_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(size_t data);\n\nvoid ppoeidn(size_t data)\n{\n    qazmlps(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(size_t data);\n\nvoid qazmlps(size_t data)\n{\n    func7(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(size_t data)\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid ppoeidn0()\n{\n    size_t data;\n    data = 0;\n    data = rand();\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn0();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,78,190]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117695_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\nextern size_t var1;\nextern size_t var2;\nextern size_t var3;\n\n\n\nvoid ppoeidn()\n{\n    size_t data = var1;\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = new char[data];\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace GenNS1\n{\n\nsize_t var1;\nsize_t var2;\nsize_t var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    data = rand();\n    var1 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117704_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(1)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(1)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,789]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117713_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(globalReturnsTrue())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(globalReturnsTrue())\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,664]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117722_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nextern int var1;\n\nvoid ppoeidn(size_t data)\n{\n    if(var1)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nnamespace GenNS1\n{\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(size_t data);\n\nvoid uytvbdk()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    var1 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,78,824]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117731_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\nstatic size_t var2;\nstatic size_t var3;\nstatic size_t var4;\n\n\n\nstatic void ppoeidn()\n{\n    size_t data = var2;\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    var2 = data;\n    ppoeidn();\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,602]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117740_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t data)\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid qazmlps()\n{\n    size_t data;\n    void (*funcPtr) (size_t) = ppoeidn;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,606]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117749_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\n\n\nclass GenClass1\n{\npublic:\n    GenClass1(size_t dataCopy);\n    ~GenClass1();\n\nprivate:\n    size_t data;\n};\n\n}\n\n\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\nGenClass1::GenClass1(size_t dataCopy)\n{\n    data = dataCopy;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n}\n\nGenClass1::~GenClass1()\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    GenClass1 var1(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117758_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\nnamespace var1\n{\n\n\n\nvoid xnzxbnd()\n{\n    size_t data;\n    data = 0;\n    if(staticReturnsTrue())\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(staticReturnsTrue())\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,78,400]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117767_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    size_t data;\n    data = 0;\n    for(i = 0; i < 1; i++)\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    for(j = 0; j < 1; j++)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117776_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nstatic size_t ppoeidn(size_t data)\n{\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    return data;\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117785_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t &data)\n{\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t &data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    ppoeidn(data);\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117794_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap)\n{\n    size_t data = dataMap[2];\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} #include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap);\n\nvoid qazmlps()\n{\n    size_t data;\n    map<int, size_t> dataMap;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,787,476]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117831_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(size_t data);\n\nvoid ppoeidn(size_t data)\n{\n    qazmlps(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid func7(size_t data);\n\nvoid qazmlps(size_t data)\n{\n    func7(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(size_t data);\n\nvoid func7(size_t data)\n{\n    ppoeidn0(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn0(size_t data)\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid ppoeidn3()\n{\n    size_t data;\n    data = 0;\n    fscanf(stdin, \"%ud\", &data);\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,824]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117842_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap)\n{\n    size_t data = dataMap[2];\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} #include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap);\n\nvoid qazmlps()\n{\n    size_t data;\n    map<int, size_t> dataMap;\n    data = 0;\n    fscanf(stdin, \"%ud\", &data);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117853_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nstatic int staticFive = 5;\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(staticFive==5)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(staticFive==5)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,789]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117862_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    while(1)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n        break;\n    }\n    while(1)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117871_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(size_t data)\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,807]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117880_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nsize_t ppoeidn(size_t data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    return data;\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nsize_t ppoeidn(size_t data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,680]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117889_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<size_t> dataList)\n{\n    size_t data = dataList.back();\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} #include <list>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<size_t> dataList);\n\nvoid qazmlps()\n{\n    size_t data;\n    list<size_t> dataList;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117898_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(STATIC_CONST_TRUE)\n    {\n        data = rand();\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,785]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117907_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = rand();\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,788]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117916_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    size_t *dataPtr1 = &data;\n    size_t *dataPtr2 = &data;\n    data = 0;\n    {\n        size_t data = *dataPtr1;\n        data = rand();\n        *dataPtr1 = data;\n    }\n    {\n        size_t data = *dataPtr2;\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = new wchar_t[data];\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                delete [] myString;\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[190,785]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117925_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(size_t data);\n\nvoid ppoeidn(size_t data)\n{\n    qazmlps(data);\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid qazmlps(size_t data)\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid func7()\n{\n    size_t data;\n    data = 0;\n    data = rand();\n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,785]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000117934_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    size_t structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct)\n{\n    size_t data = myStruct.structFirst;\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = new wchar_t[data];\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            delete [] myString;\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\ntypedef struct _structType\n{\n    size_t structFirst;\n} structType;\n\n\n\nvoid ppoeidn(structType myStruct);\n\nvoid qazmlps()\n{\n    size_t data;\n    structType myStruct;\n    data = 0;\n    data = rand();\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,785]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243511_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,676]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243520_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(globalTrue)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(globalTrue)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,835]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243529_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nstatic int var1 = 0;\n\nstatic void ppoeidn(size_t data)\n{\n    if(var1)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,606]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243538_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nstatic void ppoeidn(size_t data)\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    void (*funcPtr) (size_t) = ppoeidn;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,601]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243547_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn(size_t dataArray[])\n{\n    size_t data = dataArray[2];\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn(size_t dataArray[]);\n\nvoid qazmlps()\n{\n    size_t data;\n    size_t dataArray[5];\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    dataArray[2] = data;\n    ppoeidn(dataArray);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,606]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243556_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,120,400]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243565_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,120,400]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243574_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    size_t *dataPtr1 = &data;\n    size_t *dataPtr2 = &data;\n    data = 0;\n    {\n        size_t data = *dataPtr1;\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n        *dataPtr1 = data;\n    }\n    {\n        size_t data = *dataPtr2;\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[785,120,400]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243583_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid qazmlps(size_t data);\n\nvoid ppoeidn(size_t data)\n{\n    qazmlps(data);\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid qazmlps(size_t data)\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid func7()\n{\n    size_t data;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    func7();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,120,400]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243592_1.txt"},"language":"lang-cpp","code":"#include <vector>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<size_t> dataVector)\n{\n    size_t data = dataVector[2];\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} #include <vector>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(vector<size_t> dataVector);\n\nvoid qazmlps()\n{\n    size_t data;\n    vector<size_t> dataVector;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    ppoeidn(dataVector);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788,832]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243601_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nstatic int staticFive = 5;\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(staticFive==5)\n    {\n        fscanf(stdin, \"%zu\", &data);\n    }\n    if(staticFive==5)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[79,787,120]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243610_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    while(1)\n    {\n        fscanf(stdin, \"%zu\", &data);\n        break;\n    }\n    while(1)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,120,400]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243619_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\n\n\nstatic void ppoeidn(size_t data)\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    fscanf(stdin, \"%zu\", &data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,680]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243628_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\n\n\nsize_t ppoeidn(size_t data)\n{\n    fscanf(stdin, \"%zu\", &data);\n    return data;\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\n\n\nsize_t ppoeidn(size_t data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,832]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243637_1.txt"},"language":"lang-cpp","code":"#include <list>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<size_t> dataList)\n{\n    size_t data = dataList.back();\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} #include <list>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(list<size_t> dataList);\n\nvoid qazmlps()\n{\n    size_t data;\n    list<size_t> dataList;\n    data = 0;\n    fscanf(stdin, \"%zu\", &data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    ppoeidn(dataList);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,120,832]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243646_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,676]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243655_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    switch(6)\n    {\n    case 6:\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,690]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243664_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\ntypedef union\n{\n    size_t unionFirst;\n    size_t unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    var1 myUnion;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    myUnion.unionFirst = data;\n    {\n        size_t data = myUnion.unionSecond;\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,664,772,832]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243673_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid qazmlps(size_t data);\n\nvoid ppoeidn(size_t data)\n{\n    qazmlps(data);\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid func7(size_t data);\n\nvoid qazmlps(size_t data)\n{\n    func7(data);\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn0(size_t data);\n\nvoid func7(size_t data)\n{\n    ppoeidn0(data);\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn0(size_t data)\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid ppoeidn3()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,674]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243682_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap)\n{\n    size_t data = dataMap[2];\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} #include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap);\n\nvoid qazmlps()\n{\n    size_t data;\n    map<int, size_t> dataMap;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,787,805]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243691_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(GLOBAL_CONST_TRUE)\n    {\n        data = rand();\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            char * myString;\n            if (data > strlen(HELLO_STRING))\n            {\n                myString = (char *)malloc(data*sizeof(char));\n                if (myString == NULL) {exit(-1);}\n                strcpy(myString, HELLO_STRING);\n                printLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[785,190]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243700_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    goto source;\nsource:\n    data = rand();\n    goto var1;\nvar1:\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243709_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(size_t &data)\n{\n    data = rand();\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    ppoeidn(data);\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[785,190]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243718_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn(size_t data)\n{\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            if (myString == NULL) {exit(-1);}\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING \"hello\"\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid qazmlps()\n{\n    size_t data;\n    void (*funcPtr) (size_t) = ppoeidn;\n    data = 0;\n    data = rand();\n    funcPtr(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190,835]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243727_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(5==5)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(5==5)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,832]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243736_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    else\n    {\n        data = 20;\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n    else\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING) && data < 100)\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string or too large\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,664,789]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243745_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    {\n        size_t dataCopy = data;\n        size_t data = dataCopy;\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,680]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243754_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn(size_t data)\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,606,824]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243763_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nextern size_t var1;\nextern size_t var2;\nextern size_t var3;\n\n\n\nvoid ppoeidn()\n{\n    size_t data = var1;\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nsize_t var1;\nsize_t var2;\nsize_t var3;\n\n\n\nvoid ppoeidn();\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,606,824]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243772_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190,401]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243781_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    switch(6)\n    {\n    case 6:\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n    break;\n    default:\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243790_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\ntypedef union\n{\n    size_t unionFirst;\n    size_t unionSecond;\n} var1;\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    var1 myUnion;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    myUnion.unionFirst = data;\n    {\n        size_t data = myUnion.unionSecond;\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190,426]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243799_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid qazmlps(size_t data);\n\nvoid ppoeidn(size_t data)\n{\n    qazmlps(data);\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid func7(size_t data);\n\nvoid qazmlps(size_t data)\n{\n    func7(data);\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn0(size_t data);\n\nvoid func7(size_t data)\n{\n    ppoeidn0(data);\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn0(size_t data)\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn(size_t data);\n\nvoid ppoeidn3()\n{\n    size_t data;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,120,680]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243808_1.txt"},"language":"lang-cpp","code":"#include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap)\n{\n    size_t data = dataMap[2];\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} #include <map>\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, size_t> dataMap);\n\nvoid qazmlps()\n{\n    size_t data;\n    map<int, size_t> dataMap;\n    data = 0;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,788,832]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243817_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(GLOBAL_CONST_TRUE)\n    {\n        fscanf(stdin, \"%zu\", &data);\n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243826_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    goto source;\nsource:\n    fscanf(stdin, \"%zu\", &data);\n    goto var1;\nvar1:\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,401]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243835_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(size_t &data)\n{\n    fscanf(stdin, \"%zu\", &data);\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    ppoeidn(data);\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243844_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn(size_t * dataPtr)\n{\n    size_t data = *dataPtr;\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn(size_t * dataPtr);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    fscanf(stdin, \"%zu\", &data);\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,120,832]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243853_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace GenNS1\n{\n\nclass GenClass1\n{\npublic:\n    virtual void action(size_t data) const = 0;\n};\n\n\n\nclass GenClass2 : public GenClass1\n{\npublic:\n    void action(size_t data) const;\n};\n\n}\n\n\n\n#define HELLO_STRING L\"hello\"\n\nnamespace GenNS1\n{\n\nvoid GenClass2::action(size_t data) const\n{\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n}\n\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    fscanf(stdin, \"%zu\", &data);\n    const GenClass1& baseObject = GenClass2();\n    baseObject.action(data);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243862_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\nvoid xnzxbnd()\n{\n    size_t data;\n    data = 0;\n    if(staticReturnsTrue())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    if(staticReturnsTrue())\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    xnzxbnd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[120,664,832]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243871_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    size_t data;\n    data = 0;\n    for(i = 0; i < 1; i++)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                inputBuffer[recvResult] = '\\0';\n                data = strtoul(inputBuffer, NULL, 0);\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    for(j = 0; j < 1; j++)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[789,120,787]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243880_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nstatic size_t ppoeidn(size_t data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    return data;\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,664]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243889_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn(void * dataVoidPtr)\n{\n    size_t * dataPtr = (size_t *)dataVoidPtr;\n    size_t data = (*dataPtr);\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn(void * dataVoidPtr);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    ppoeidn(&data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[78,120,680]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243898_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(1)\n    {\n        data = rand();\n    }\n    if(1)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[785,190]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243907_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\n\n\nvoid ppoeidn()\n{\n    size_t data;\n    data = 0;\n    if(globalReturnsTrue())\n    {\n        data = rand();\n    }\n    if(globalReturnsTrue())\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190,835]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243916_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\n\n\nextern int var1;\n\nvoid ppoeidn(size_t data)\n{\n    if(var1)\n    {\n        {\n            wchar_t * myString;\n            if (data > wcslen(HELLO_STRING))\n            {\n                myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n                if (myString == NULL) {exit(-1);}\n                wcscpy(myString, HELLO_STRING);\n                printWLine(myString);\n                free(myString);\n            }\n            else\n            {\n                printLine(\"Input is less than the length of the source string\");\n            }\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n\n\nint var1 = 0;\n\nvoid ppoeidn(size_t data);\n\nvoid uytvbdk()\n{\n    size_t data;\n    data = 0;\n    data = rand();\n    var1 = 1; \n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    uytvbdk();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190,835]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243925_1.txt"},"language":"lang-cpp","code":"#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\nstatic size_t var1;\nstatic size_t var2;\nstatic size_t var3;\n\n\n\nstatic void ppoeidn()\n{\n    size_t data = var1;\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\nvoid qhwystdd()\n{\n    size_t data;\n    data = 0;\n    data = rand();\n    var1 = data;\n    ppoeidn();\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190]}},{"data":{"cwe_ids":["CWE-789"],"filename":"000243934_1.txt"},"language":"lang-cpp","code":"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\ntypedef struct var1\n{\n    size_t structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    size_t data = myStruct.structFirst;\n    {\n        wchar_t * myString;\n        if (data > wcslen(HELLO_STRING))\n        {\n            myString = (wchar_t *)malloc(data*sizeof(wchar_t));\n            if (myString == NULL) {exit(-1);}\n            wcscpy(myString, HELLO_STRING);\n            printWLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#define HELLO_STRING L\"hello\"\n\ntypedef struct var1\n{\n    size_t structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid qazmlps()\n{\n    size_t data;\n    var2 myStruct;\n    data = 0;\n    data = rand();\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n","result":{"isCodeSecure":false,"CWEs":[787,190,835]}}]