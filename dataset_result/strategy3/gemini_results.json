{
    "416": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-401"
                ],
                "filename": "000099389_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap)\n{\n    int64_t * data = dataMap[2];\n    ; \n}\n\n} #include <map>\n\n#include <wchar.h>\n\nusing namespace std;\n\nnamespace GenNS1\n{\n\n\n\nvoid ppoeidn(map<int, int64_t *> dataMap);\n\nvoid qazmlps()\n{\n    int64_t * data;\n    map<int, int64_t *> dataMap;\n    data = NULL;\n    data = (int64_t *)calloc(100, sizeof(int64_t));\n    data[0] = 5LL;\n    printLongLongLine(data[0]);\n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    ppoeidn(dataMap);\n}\n\n} \n\n\n\nusing namespace GenNS1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    401,
                    416,
                    789
                ]
            }
        }
    },
    "415": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-415"
                ],
                "filename": "000101579_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    TwoIntsClass * data;\n    data = NULL;\n    data = new TwoIntsClass[100];\n    delete [] data;\n    delete [] data;\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    415
                ]
            }
        }
    },
    "476": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-401"
                ],
                "filename": "000002054_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include <iostream>\nusing namespace std;\n\n\nvoid function() {\n\tshort *p = 0;\n\ttry {\n                p = new short [1000];\n            }\n \tcatch (var1&)\n\t{\n\t  cout << \"Error allocating memory.\" << endl;\n\t}\n\n\tcout<<p;\n\treturn;\n}\n\nint main()\n{\n\tint i,j;\n\tcout<<\"Please enter two numbers: \"<<endl;\n\tcin>>i>>j;\n\t\n\twhile (i==j) function();\n\treturn 0;\n}",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    401,
                    672,
                    476
                ]
            }
        }
    },
    "401": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-401"
                ],
                "filename": "000002054_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include <iostream>\nusing namespace std;\n\n\nvoid function() {\n\tshort *p = 0;\n\ttry {\n                p = new short [1000];\n            }\n \tcatch (var1&)\n\t{\n\t  cout << \"Error allocating memory.\" << endl;\n\t}\n\n\tcout<<p;\n\treturn;\n}\n\nint main()\n{\n\tint i,j;\n\tcout<<\"Please enter two numbers: \"<<endl;\n\tcin>>i>>j;\n\t\n\twhile (i==j) function();\n\treturn 0;\n}",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    401,
                    672,
                    476
                ]
            }
        }
    },
    "775": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-773"
                ],
                "filename": "000116679_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    FILE * data;\n    data = NULL;\n    data = fopen(\", \"w+\");\n    {\n        FILE * dataCopy = data;\n        FILE * data = dataCopy;\n        data = fopen(\", \"w+\");\n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    775
                ]
            }
        }
    },
    "762": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-415"
                ],
                "filename": "000101371_1.txt"
            },
            "language": "lang-cpp",
            "code": "\n\n#include <wchar.h>\n\n\n\nvoid qazmlps(int * data);\n\nvoid ppoeidn(int * data)\n{\n    qazmlps(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid func7(int * data);\n\nvoid qazmlps(int * data)\n{\n    func7(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn0(int * data);\n\nvoid func7(int * data)\n{\n    ppoeidn0(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn0(int * data)\n{\n    free(data);\n}\n\n\n\n#include <wchar.h>\n\n\n\nvoid ppoeidn(int * data);\n\nvoid ppoeidn3()\n{\n    int * data;\n    data = NULL;\n    data = (int *)malloc(100*sizeof(int));\n    free(data);\n    ppoeidn(data);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn3();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    416,
                    664,
                    762
                ]
            }
        }
    },
    "789": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-190"
                ],
                "filename": "000082149_1.txt"
            },
            "language": "lang-cpp",
            "code": "\n\ntypedef struct var1\n{\n    char structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct)\n{\n    char data = myStruct.structFirst;\n    {\n        char result = data + 1;\n        printHexCharLine(result);\n    }\n}\n\n\n\ntypedef struct var1\n{\n    char structFirst;\n} var2;\n\n\n\nvoid ppoeidn(var2 myStruct);\n\nvoid qazmlps()\n{\n    char data;\n    var2 myStruct;\n    data = ' ';\n    fscanf (stdin, \"%c\", &data);\n    myStruct.structFirst = data;\n    ppoeidn(myStruct);\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    789,
                    676
                ]
            }
        }
    },
    "773": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": null
    },
    "590": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": null
    },
    "190": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-190"
                ],
                "filename": "000082266_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    char data;\n    data = ' ';\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        data = CHAR_MAX;\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            char result = data + 1;\n            printHexCharLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    190
                ]
            }
        }
    }
}