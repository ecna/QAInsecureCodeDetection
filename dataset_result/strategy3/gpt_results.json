{
    "416": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-415"
                ],
                "filename": "000101885_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic int var2 = 0;\n\nstatic void ppoeidn(char * data)\n{\n    if(var2)\n    {\n        delete data;\n    }\n}\n\nvoid qhwystdd()\n{\n    char * data;\n    data = NULL;\n    data = new char;\n    delete data;\n    var2 = 1; \n    ppoeidn(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    415,
                    416
                ]
            }
        }
    },
    "415": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-415"
                ],
                "filename": "000101750_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\n#include <wchar.h>\n\nnamespace var1\n{\n\n\n\nstatic void ppoeidn(long * data)\n{\n    delete [] data;\n}\n\nvoid qhwystdd()\n{\n    long * data;\n    void (*funcPtr) (long *) = ppoeidn;\n    data = NULL;\n    data = new long[100];\n    delete [] data;\n    funcPtr(data);\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qhwystdd();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    415
                ]
            }
        }
    },
    "476": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-476"
                ],
                "filename": "000001999_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint *tab[1] = {(int *)0};\n\tcout << \"Hello World!\" << endl;\n\tint  c = *(tab[0]);\n\treturn 0;\n}",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    476
                ]
            }
        }
    },
    "401": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-401"
                ],
                "filename": "000100091_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    char * data;\n    data = NULL;\n    if(globalFive==5)\n    {\n        data = new char;\n        *data = 'A';\n        printHexCharLine(*data);\n    }\n    if(globalFive==5)\n    {\n        ; \n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    401
                ]
            }
        }
    },
    "775": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": null
    },
    "762": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-762"
                ],
                "filename": "000242082_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    int * data;\n    data = NULL;\n    while(1)\n    {\n        data = NULL;\n        data = (int *)realloc(data, 100*sizeof(int));\n        if (data == NULL) {exit(-1);}\n        break;\n    }\n    while(1)\n    {\n        delete [] data;\n        break;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    762
                ]
            }
        }
    },
    "789": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-789"
                ],
                "filename": "000117016_1.txt"
            },
            "language": "lang-cpp",
            "code": "\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nsize_t ppoeidn(size_t data)\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            inputBuffer[recvResult] = '\\0';\n            data = strtoul(inputBuffer, NULL, 0);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    return data;\n}\n\n\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)\n\n#define HELLO_STRING \"hello\"\n\n\n\nsize_t ppoeidn(size_t data);\n\nvoid qazmlps()\n{\n    size_t data;\n    data = 0;\n    data = ppoeidn(data);\n    {\n        char * myString;\n        if (data > strlen(HELLO_STRING))\n        {\n            myString = (char *)malloc(data*sizeof(char));\n            strcpy(myString, HELLO_STRING);\n            printLine(myString);\n            free(myString);\n        }\n        else\n        {\n            printLine(\"Input is less than the length of the source string\");\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    qazmlps();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    20,
                    125,
                    190,
                    787,
                    789
                ]
            }
        }
    },
    "773": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": null
    },
    "590": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-401"
                ],
                "filename": "000099963_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\n#ifndef _WIN32\n#include <wchar.h>\n#endif\n\nnamespace var1\n{\n\n\n\nvoid ppoeidn()\n{\n    struct _twoIntsStruct * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        data = new struct _twoIntsStruct[100];\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n    }\n    else\n    {\n        struct _twoIntsStruct var2[100];\n        data = var2;\n        data[0].intOne = 0;\n        data[0].intTwo = 0;\n        printStructLine((twoIntsStruct *)&data[0]);\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        ; \n    }\n    else\n    {\n        delete[] data;\n    }\n}\n\n} \n\n\n\nusing namespace var1; \n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    590
                ]
            }
        }
    },
    "190": {
        "true_positive": null,
        "false_negative": null,
        "false_positive": {
            "data": {
                "cwe_ids": [
                    "CWE-190"
                ],
                "filename": "000083566_1.txt"
            },
            "language": "lang-cpp",
            "code": "#include \"std_testcase.h\"\n\n\n\nvoid ppoeidn()\n{\n    int i,j;\n    int data;\n    data = 0;\n    for(i = 0; i < 1; i++)\n    {\n        data = INT_MAX;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        {\n            int result = data + 1;\n            printIntLine(result);\n        }\n    }\n}\n\n\n\nint main(int argc, char * argv[])\n{\n    srand( (unsigned)time(NULL) );\n\n    printLine(\"Calling ...\");\n    ppoeidn();\n    printLine(\"Finished\");\n    return 0;\n}\n\n",
            "result": {
                "isCodeSecure": false,
                "CWEs": [
                    190
                ]
            }
        }
    }
}